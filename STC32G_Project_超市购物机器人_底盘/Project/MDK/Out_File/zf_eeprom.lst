C251 COMPILER V5.60.0,  zf_eeprom                                                          08/04/24  13:47:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_eeprom
OBJECT MODULE PLACED IN .\Out_File\zf_eeprom.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_eeprom.c XSMALL INTR2 WARNINGLEV
                    -EL(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekf
                    -ree_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_File\zf_eeprom.lst
                    -) TABS(2) OBJECT(.\Out_File\zf_eeprom.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          eeprom
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          #include "zf_eeprom.h"
   20          #include "board.h"
   21          #include "intrins.h"
   22          #include "zf_delay.h"
   23          
   24          //-------------------------------------------------------------------------------------------------------
             -------------
   25          //  @brief      EEPROM触发操作，
   26          //  @param      
   27          //  @return     void
   28          //  Sample usage:           内部使用用户无需关心
   29          //-------------------------------------------------------------------------------------------------------
             -------------
   30          void eeprom_trig(void)
   31          {
   32   1          F0 = EA;    //保存全局中断
   33   1          IAP_TRIG = 0x5A;
   34   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   35   1                                              //送完A5H后，IAP命令立即被触发启动
   36   1                                              //CPU等待IAP完成后，才会继续执行程序。
   37   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   38   1          _nop_();
   39   1          _nop_();
   40   1          _nop_();
   41   1        
   42   1          EA = F0;    //恢复全局中断
   43   1      }
   44          
   45          
   46          //-------------------------------------------------------------------------------------------------------
             -------------
   47          //  @brief      初始化EEPROM
   48          //  @param      NULL
   49          //  @return     void
   50          //  Sample usage:           
   51          //-------------------------------------------------------------------------------------------------------
C251 COMPILER V5.60.0,  zf_eeprom                                                          08/04/24  13:47:29  PAGE 2   

             -------------
   52          void iap_init(void)
   53          {
   54   1        IAP_CONTR = 0x80;   //使能EEPROM操作
   55   1        iap_set_tps();      //设置擦除等待时间
   56   1      
   57   1        
   58   1      }
   59          
   60          //-------------------------------------------------------------------------------------------------------
             -------------
   61          //  @brief      关闭EEPROM
   62          //  @param      NULL
   63          //  @return     void
   64          //  Sample usage:           
   65          //-------------------------------------------------------------------------------------------------------
             -------------
   66          void iap_idle(void)
   67          {
   68   1        IAP_CONTR = 0;      //失能EEPROM操作
   69   1      }
   70          
   71          
   72          //-------------------------------------------------------------------------------------------------------
             -------------
   73          //  @brief      获取EEPROM操作失败状态位，需要软件清零
   74          //  @param      NULL
   75          //  @return     void
   76          //  Sample usage:           
   77          //                操作失败返回1;
   78          //-------------------------------------------------------------------------------------------------------
             -------------
   79          uint8 iap_get_cmd_state(void)
   80          {
   81   1        return ((IAP_CONTR&0x01) == 0x01);
   82   1      }
   83          
   84          
   85          //-------------------------------------------------------------------------------------------------------
             -------------
   86          //  @brief      设置IAP等待时间
   87          //  @param      NULL
   88          //  @return     void
   89          //  Sample usage:           
   90          //-------------------------------------------------------------------------------------------------------
             -------------
   91          void iap_set_tps(void)
   92          {
   93   1        uint8 write_time;
   94   1        write_time = (sys_clk / 1000000) ;
   95   1        IAP_TPS = write_time;
   96   1      }
   97          
   98          
   99          //-------------------------------------------------------------------------------------------------------
             -------------
  100          //  @brief      EEPROM读取多个字节
  101          //  @param      addr      需要读取的eeprom地址
  102          //  @param      *buf      需要读取的数据地址
  103          //  @param      len       需要读取的数据长度
  104          //  @return     void
  105          //  Sample usage:               uint8 str[10];
  106          //                iap_read_bytes(0x00,str,10);
  107          //                将0x00-0x0A地址中的数据，读取到str中。
  108          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_eeprom                                                          08/04/24  13:47:29  PAGE 3   

  109          void iap_read_bytes(uint32 addr, uint8 *buf, uint16 len)
  110          {
  111   1      
  112   1        
  113   1        IAP_CMD = 1;        //设置 IAP 读命令 
  114   1      
  115   1        while(len--)
  116   1        {
  117   2              IAP_ADDRE = 0;
  118   2          IAP_ADDRL = addr;     //设置 IAP 低地址
  119   2          IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  120   2          IAP_ADDRE = addr >> 16; //设置 IAP 最高地址
  121   2              eeprom_trig();
  122   2          *buf++ = IAP_DATA;    //读 IAP 数据
  123   2          addr++;
  124   2          
  125   2        }
  126   1        
  127   1      }
  128          
  129          
  130          //-------------------------------------------------------------------------------------------------------
             -------------
  131          //  @brief      EEPROM写多个字节
  132          //  @param      addr      需要写的eeprom地址
  133          //  @param      *buf      需要写的数据地址
  134          //  @param      len       需要写的数据长度
  135          //  @return     void
  136          //  Sample usage:           iap_write_bytes(0x00,(uint8 *)"0123456789",10);
  137          //                将"0123456789"写入0x00-0x0A地址中;
  138          //-------------------------------------------------------------------------------------------------------
             -------------
  139          void iap_write_bytes(uint32 addr, uint8 *buf, uint16 len)
  140          {
  141   1      
  142   1        IAP_CMD = 2;        //设置 IAP 读命令 
  143   1        
  144   1        while(len--)
  145   1        {
  146   2              IAP_ADDRE = 0;
  147   2          IAP_ADDRL = addr;     //设置 IAP 低地址
  148   2          IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  149   2          IAP_ADDRE = addr >> 16; //设置 IAP 最高地址
  150   2          IAP_DATA = *buf++;    //写 IAP 数据
  151   2          addr++;
  152   2      
  153   2          eeprom_trig();
  154   2        }
  155   1        
  156   1      }
  157          
  158          
  159          
  160          //-------------------------------------------------------------------------------------------------------
             -------------
  161          //  @brief      EEPROM擦除目标地址所在的一页（1扇区/512字节）
  162          //  @param      addr      需要写的eeprom地址
  163          //  @return     void
  164          //  Sample usage:           iap_erase_page(0x20);
  165          //                擦除0x00-0x200的数据
  166          //-------------------------------------------------------------------------------------------------------
             -------------
  167          void iap_erase_page(uint32 addr) 
  168          { 
  169   1      
  170   1        IAP_CMD = 3;        //设置 IAP 擦除命令
C251 COMPILER V5.60.0,  zf_eeprom                                                          08/04/24  13:47:29  PAGE 4   

  171   1        IAP_ADDRL = addr;       //设置 IAP 低地址
  172   1        IAP_ADDRH = addr >> 8;    //设置 IAP 高地址
  173   1        IAP_ADDRE = addr >> 16;   //设置 IAP 最高地址
  174   1          eeprom_trig();  
  175   1        
  176   1        
  177   1        delay_ms(10);       //擦除1扇区(512字节)：约4-6ms
  178   1      }
  179          
  180          
  181          
  182          ////-----------------------------------------------------------------------------------------------------
             ---------------
  183          ////  @brief      扩展EEPROM写多个字节(无需擦除)
  184          ////  @param      addr      需要写的eeprom地址
  185          ////  @param      *buf      需要写的数据地址
  186          ////  @param      len       需要写的数据长度
  187          ////  @return     void
  188          ////  Sample usage:           extern_iap_write_bytes(0x0000,(uint8 *)"0123456789";,10);
  189          ////                将"0123456789"写入0x00-0x0A地址中;
  190          ////  @note：           不要跨扇区使用。
  191          ////                addr地址：0-511为一个扇区,512-1023为一个扇区，1024-1535为一个扇区，依次类推。
  192          ////-----------------------------------------------------------------------------------------------------
             ---------------
  193          //void extern_iap_write_bytes(uint16 addr, uint8 *buf, uint16 len)
  194          //{ 
  195          //  uint8 temp[512];
  196          //  uint16 i;
  197          //  
  198          //  for(i=0; i<512 ;i++)  temp[i] = 0;      //清0
  199          //  iap_read_bytes(addr&0xFE00, temp, 512);     //读取
  200          //  for(i=0; i<len; i++)  temp[(addr&0x1FF) + i] = buf[i];  //改
  201          //  iap_erase_page(addr);             //擦除
  202          //  iap_write_bytes(addr&0xFE00, temp, 512);    //写入
  203          //}
  204          
  205          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       310     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        25     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
