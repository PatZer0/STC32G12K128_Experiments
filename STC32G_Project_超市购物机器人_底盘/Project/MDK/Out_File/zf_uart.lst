C251 COMPILER V5.60.0,  zf_uart                                                            08/04/24  13:47:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_uart
OBJECT MODULE PLACED IN .\Out_File\zf_uart.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_uart.c XSMALL INTR2 WARNINGLEVEL
                    -(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfre
                    -e_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_File\zf_uart.lst) TA
                    -BS(2) OBJECT(.\Out_File\zf_uart.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          uart
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          #include "zf_uart.h"
   21          #include "board.h"
   22             
   23          uint8 busy[5];         //接收忙标志位
   24          
   25          //-------------------------------------------------------------------------------------------------------
             -------------
   26          //  @brief      串口初始化
   27          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
   28          //  @param      uart_rx_pin     串口接收引脚
   29          //  @param      uart_tx_pin     串口发送引脚
   30          //  @param      baud          串口波特率
   31          //  @param      tim_n         使用tim_n作为串口波特率发生器(TIM1-TIM4)
   32          //  @return     NULL            
   33          //  Sample usage:               uart_init(UART_1, UART1_RX_P30, UART1_TX_P31, 115200, TIM_2);        //初
             -始化串口1 波特率115200 发送引脚使用P31 接收引脚使用P30 ,使用定时器2作为波特率发生器
   34          //  @note                       串口1使用 定时器1或者定时器2 作为波特率发生器。
   35          //                串口2使用 定时器2        作为波特率发生器。
   36          //                串口3使用 定时器3或者定时器2 作为波特率发生器。
   37          //                串口4使用 定时器4或者定时器2 作为波特率发生器。
   38          //                              STC32G仅有 定时器0-定时器4，这5个定时器。
   39          //                编码器采集数据也需要定时器作为外部计数。
   40          //                如果不同的串口，使用同一个定时器，串口的波特率以最后一个初始化为准
   41          //-------------------------------------------------------------------------------------------------------
             -------------
   42          void uart_init(UARTN_enum uart_n, UARTPIN_enum uart_rx_pin, UARTPIN_enum uart_tx_pin, uint32 baud, TIMN_e
             -num tim_n)
   43          {
   44   1          uint16 brt;
   45   1      
   46   1        brt = (uint16)(65536 - (sys_clk/baud/4));
   47   1      
   48   1      
   49   1        switch(uart_n)
   50   1        {
C251 COMPILER V5.60.0,  zf_uart                                                            08/04/24  13:47:30  PAGE 2   

   51   2          case UART_1:
   52   2          {
   53   3            if(TIM_1 == tim_n)
   54   3            {
   55   4              SCON |= 0x50;
   56   4              TMOD |= 0x00;
   57   4              TL1 = brt;
   58   4              TH1 = brt >> 8;
   59   4              AUXR |= 0x40;
   60   4              TR1 = 1;
   61   4              busy[1] = 0;
   62   4            }
   63   3            else if(TIM_2 == tim_n)
   64   3            {
   65   4              SCON |= 0x50;
   66   4              T2L = brt;
   67   4              T2H = brt >> 8;
   68   4              AUXR |= 0x15;
   69   4            }
   70   3            P_SW1 &= ~(0x03<<6);
   71   3            if((UART1_RX_P30 == uart_rx_pin) && (UART1_TX_P31 == uart_tx_pin))
   72   3            {
   73   4              P_SW1 |= 0x00;
   74   4            }
   75   3            else if((UART1_RX_P36 == uart_rx_pin) && (UART1_TX_P37 == uart_tx_pin))
   76   3            {
   77   4              P_SW1 |= 0x40;
   78   4            }
   79   3            else if((UART1_RX_P16 == uart_rx_pin) && (UART1_TX_P17 == uart_tx_pin))
   80   3            {
   81   4              P_SW1 |= 0x80;
   82   4            }
   83   3            else if((UART1_RX_P43 == uart_rx_pin) && (UART1_TX_P44 == uart_tx_pin))
   84   3            {
   85   4              P_SW1 |= 0xc0;
   86   4            }
   87   3            busy[1] = 0;
   88   3            ES = 1;
   89   3            break;
   90   3          }
   91   2          
   92   2          case UART_2:
   93   2          {
   94   3            if(TIM_2 == tim_n)
   95   3            {
   96   4              S2CON |= 0x50;
   97   4              T2L = brt;
   98   4              T2H = brt >> 8;
   99   4              AUXR |= 0x14;
  100   4            }
  101   3            
  102   3            P_SW2 &= ~(0x01<<0);
  103   3            if((UART2_RX_P10 == uart_rx_pin) && (UART2_TX_P11 == uart_tx_pin))
  104   3            {
  105   4              P_SW2 |= 0x00;
  106   4            }
  107   3            else if((UART2_RX_P46 == uart_rx_pin) && (UART2_TX_P47 == uart_tx_pin))
  108   3            {
  109   4              P_SW2 |= 0x01;
  110   4            }
  111   3            
  112   3            IE2 |= 0x01 << 0; //允许串行口2中断
  113   3            busy[2] = 0;
  114   3            break;
  115   3          }
  116   2          
C251 COMPILER V5.60.0,  zf_uart                                                            08/04/24  13:47:30  PAGE 3   

  117   2          case UART_3:
  118   2          {
  119   3            if(TIM_2 == tim_n)
  120   3            {
  121   4              S3CON |= 0x10;
  122   4              T2L = brt;
  123   4              T2H = brt >> 8;
  124   4              AUXR |= 0x14;
  125   4            }
  126   3            else if(TIM_3 == tim_n)
  127   3            {
  128   4              S3CON |= 0x50;
  129   4              T3L = brt;
  130   4              T3H = brt >> 8;
  131   4              T4T3M |= 0x0a;
  132   4            }
  133   3            
  134   3            P_SW2 &= ~(0x01<<1);
  135   3            if((UART3_RX_P00 == uart_rx_pin) && (UART3_TX_P01 == uart_tx_pin))
  136   3            {
  137   4              P_SW2 |= 0x00;
  138   4            }
  139   3            else if((UART3_RX_P50 == uart_rx_pin) && (UART3_TX_P51 == uart_tx_pin))
  140   3            {
  141   4              P_SW2 |= 0x02;
  142   4            }
  143   3            
  144   3            IE2 |= 0x01<<3; //允许串行口3中断
  145   3            busy[3] = 0;
  146   3            break;
  147   3          }
  148   2          
  149   2          case UART_4:
  150   2          {
  151   3            if(TIM_2 == tim_n)
  152   3            {
  153   4              S4CON |= 0x10;
  154   4              T2L = brt;
  155   4              T2H = brt >> 8;
  156   4              AUXR |= 0x14;
  157   4            }
  158   3            else if(TIM_4 == tim_n)
  159   3            {
  160   4              S4CON |= 0x50;
  161   4              T4L = brt;
  162   4              T4H = brt >> 8;
  163   4              T4T3M |= 0xa0;
  164   4            }
  165   3      
  166   3            P_SW2 &= ~(0x01<<2);
  167   3            if((UART4_RX_P02 == uart_rx_pin) && (UART4_TX_P03 == uart_tx_pin))
  168   3            {
  169   4              P_SW2 |= 0x00;
  170   4            }
  171   3            else if((UART4_RX_P52 == uart_rx_pin) && (UART4_TX_P53 == uart_tx_pin))
  172   3            {
  173   4              P5M0 = 0x00;
  174   4              P5M1 = 0x01<<2;//P5.2 需要设置为高阻
  175   4              P_SW2 |= 0x04;
  176   4            }
  177   3            IE2 |= 0x01<<4; //允许串行口4中断
  178   3            busy[4] = 0;
  179   3            break;
  180   3          }
  181   2          
  182   2        }
C251 COMPILER V5.60.0,  zf_uart                                                            08/04/24  13:47:30  PAGE 4   

  183   1      
  184   1      }
  185          
  186          //-------------------------------------------------------------------------------------------------------
             -------------
  187          //  @brief      串口字节输出
  188          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  189          //  @param      dat             需要发送的字节
  190          //  @return     void        
  191          //  Sample usage:               uart_putchar(UART_1,0xA5);       // 串口1发送0xA5
  192          //-------------------------------------------------------------------------------------------------------
             -------------
  193          void uart_putchar(UARTN_enum uart_n,uint8 dat)
  194          {
  195   1        switch(uart_n)
  196   1        {
  197   2          case UART_1:
  198   2            while (busy[1]);
  199   2            busy[1] = 1;
  200   2            SBUF = dat;
  201   2              break;
  202   2          case UART_2:
  203   2            while (busy[2]);
  204   2            busy[2] = 1;
  205   2            S2BUF = dat;
  206   2              break;
  207   2          case UART_3:
  208   2            while (busy[3]);
  209   2            busy[3] = 1;
  210   2            S3BUF = dat;
  211   2              break;
  212   2          case UART_4:
  213   2            while (busy[4]);
  214   2            busy[4] = 1;
  215   2            S4BUF = dat;
  216   2              break;
  217   2        }
  218   1      }
  219          
  220          
  221          //-------------------------------------------------------------------------------------------------------
             -------------
  222          //  @brief      串口发送数组
  223          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  224          //  @param      *buff           要发送的数组地址
  225          //  @param      len             发送长度
  226          //  @return     void
  227          //  Sample usage:               uart_putbuff(UART_1,&a[0],5);
  228          //-------------------------------------------------------------------------------------------------------
             -------------
  229          void uart_putbuff(UARTN_enum uart_n,uint8 *p,uint32 len)
  230          {
  231   1          while(len--)
  232   1              uart_putchar(uart_n,*p++);
  233   1      }
  234          
  235          
  236          //-------------------------------------------------------------------------------------------------------
             -------------
  237          //  @brief      串口发送字符串
  238          //  @param      uart_n          串口模块号(USART_1,USART_2,USART_3,USART_4)
  239          //  @param      *str            要发送的字符串地址
  240          //  @return     void
  241          //  Sample usage:               uart_putstr(UART_1,"i lvoe you"); 
  242          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_uart                                                            08/04/24  13:47:30  PAGE 5   

  243          void uart_putstr(UARTN_enum uart_n,uint8 *str)
  244          {
  245   1          while(*str)
  246   1          {
  247   2              uart_putchar(uart_n, *str++);
  248   2          }
  249   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       901     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        38     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
