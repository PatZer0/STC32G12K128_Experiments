C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE oled.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\oled.lst) TABS(2) OB
                    -JECT(.\Objects\oled.obj) 

stmt  level    source

    1          #include "oled.h"
    2          #include "font.h"
    3          #include <STDIO.H>
    4          #include <STC32G.H>
    5          #include <STRING.H>
    6          
    7          unsigned char xdata ShowBUFF[8][128];                           //OLED全局缓存
    8          
    9          
   10          //========================================================================
   11          // 函数名称: delay
   12          // 函数功能: OLED驱动用的延时
   13          // 入口参数: 无
   14          // 函数返回: 无
   15          // 当前版本: VER1.0
   16          // 修改日期: 2023 - 6 - 7
   17          // 当前作者: ZCF
   18          // 其他备注:
   19          //========================================================================
   20          void delay(void)
   21          {
   22   1          int xdata i;
   23   1          
   24   1          for (i=0; i<100; i++);
   25   1      }
   26          
   27          //========================================================================
   28          // 函数名称: delay_ms
   29          // 函数功能: ms延时函数
   30          // 入口参数: 无
   31          // 函数返回: 无
   32          // 当前版本: VER1.0
   33          // 修改日期: 2023 - 6 - 7
   34          // 当前作者: ZCF
   35          // 其他备注:
   36          //========================================================================
   37          void delay_ms(unsigned int ms)
   38          {
   39   1           unsigned int xdata i;
   40   1           do{
   41   2                i = MAIN_Fosc / 6000;
   42   2                while(--i);   //6T per loop
   43   2           }while(--ms);
   44   1      }
   45          
   46          //========================================================================
   47          // 函数名称: OLED_WR_Byte
   48          // 函数功能: OLED地址/数据写入函数
   49          // 入口参数: @dat:数据    @cmd:命令
   50          // 函数返回: 无
   51          // 当前版本: VER1.0
   52          // 修改日期: 2023 - 6 - 7
   53          // 当前作者: ZCF
   54          // 其他备注:
   55          //========================================================================
   56          void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
   57          {
   58   1          unsigned char udat[1] ;
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 2   

   59   1          udat[0] = dat;
   60   1          if( cmd==1 )
   61   1              IIC_Write_NByte(0X78,0x40,udat,1);
   62   1          else
   63   1              IIC_Write_NByte(0X78,0x00,udat,1);
   64   1      }
   65          
   66          //========================================================================
   67          // 函数名称: OLED_Init
   68          // 函数功能: OLED初始化函数
   69          // 入口参数: 无
   70          // 函数返回: 无
   71          // 当前版本: VER1.0
   72          // 修改日期: 2023 - 6 - 7
   73          // 当前作者: ZCF
   74          // 其他备注:
   75          //========================================================================
   76          void OLED_Init(void)
   77          {
   78   1          IIC_Init();
   79   1          delay_ms(100);
   80   1          delay_ms(200);
   81   1      
   82   1      
   83   1          OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
   84   1          OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
   85   1          OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
   86   1          OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F
             -)
   87   1          OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
   88   1          OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
   89   1          OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   90   1          OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   91   1          OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
   92   1          OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
   93   1          OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
   94   1          OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset Shift Mapping RAM Counter (0x00~0x3F)
   95   1          OLED_WR_Byte(0x00,OLED_CMD);//-not offset
   96   1          OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
   97   1          OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
   98   1          OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
   99   1          OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
  100   1          OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
  101   1          OLED_WR_Byte(0x12,OLED_CMD);
  102   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  103   1          OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
  104   1          OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
  105   1          OLED_WR_Byte(0x02,OLED_CMD);//
  106   1          OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
  107   1          OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
  108   1          OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
  109   1          OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
  110   1          OLED_WR_Byte(0xAF,OLED_CMD);
  111   1          OLED_BuffClear();
  112   1          OLED_BuffShow();
  113   1          OLED_DisplayOn();
  114   1      }
  115          
  116          
  117          //========================================================================
  118          // 函数名称: OLED_Set_Pos
  119          // 函数功能: OLED设置显示位置
  120          // 入口参数: @x:x坐标     @y:y坐标
  121          // 函数返回: 无
  122          // 当前版本: VER1.0
  123          // 修改日期: 2023 - 6 - 7
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 3   

  124          // 当前作者: ZCF
  125          // 其他备注:
  126          //========================================================================
  127          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  128          { 
  129   1        OLED_WR_Byte((unsigned char)(0xb0+y),OLED_CMD);
  130   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  131   1        OLED_WR_Byte((x&0x0f),OLED_CMD); 
  132   1      }   
  133          
  134          
  135          //========================================================================
  136          // 函数名称: OLED_DrawBMP
  137          // 函数功能: OLED显示图片
  138          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  139          // 函数返回: 无
  140          // 当前版本: VER1.0
  141          // 修改日期: 2023 - 6 - 7
  142          // 当前作者: ZCF
  143          // 其他备注:
  144          //========================================================================
  145          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP
             -[])
  146          {   
  147   1          unsigned int xdata j=0;
  148   1          unsigned char xdata x,y;
  149   1      
  150   1          for(y=y0;y<(y1+y0);y++)
  151   1          {
  152   2              OLED_Set_Pos(x0,y);
  153   2              for(x=0;x<x1;x++)
  154   2              {      
  155   3                  OLED_WR_Byte(BMP[j++],OLED_DATA);       
  156   3              }
  157   2          }
  158   1      } 
  159          
  160          //========================================================================
  161          // 函数名称: OLED_DisplayOn
  162          // 函数功能: OLED开显示
  163          // 入口参数: 无
  164          // 函数返回: 无
  165          // 当前版本: VER1.0
  166          // 修改日期: 2023 - 6 - 7
  167          // 当前作者: ZCF
  168          // 其他备注:
  169          //========================================================================
  170          void OLED_DisplayOn(void)     //开显示
  171          {
  172   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
  173   1          OLED_WR_Byte(0x14,OLED_CMD);//开启电荷泵
  174   1          OLED_WR_Byte(0xAF,OLED_CMD);//点亮屏幕       
  175   1      }
  176            
  177          //========================================================================
  178          // 函数名称: OLED_DisplayOff
  179          // 函数功能: OLED关显示
  180          // 入口参数: 无
  181          // 函数返回: 无
  182          // 当前版本: VER1.0
  183          // 修改日期: 2023 - 6 - 7
  184          // 当前作者: ZCF
  185          // 其他备注:
  186          //========================================================================
  187          void OLED_DisplayOff(void)     //关显示
  188          {
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 4   

  189   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
  190   1          OLED_WR_Byte(0x10,OLED_CMD);//关闭电荷泵
  191   1          OLED_WR_Byte(0xAF,OLED_CMD);//关闭屏幕        
  192   1      }
  193          
  194          //========================================================================
  195          // 函数名称: OLED_LightSet
  196          // 函数功能: OLED亮度设置
  197          // 入口参数: @num： 0-255
  198          // 函数返回: 无
  199          // 当前版本: VER1.0
  200          // 修改日期: 2023 - 6 - 7
  201          // 当前作者: ZCF
  202          // 其他备注:
  203          //========================================================================
  204          void OLED_LightSet(unsigned char num)     //亮度设置
  205          {
  206   1          OLED_WR_Byte(0x81,OLED_CMD);//
  207   1          OLED_WR_Byte(num,OLED_CMD);//  
  208   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  209   1          OLED_WR_Byte(0x20,OLED_CMD);//Set VCOM Deselect Level   
  210   1      }
  211          
  212          
  213          //========================================================================
  214          // 函数名称: OLED_BuffClear
  215          // 函数功能: OLED清空缓存
  216          // 入口参数: 无
  217          // 函数返回: 无
  218          // 当前版本: VER1.0
  219          // 修改日期: 2023 - 6 - 7
  220          // 当前作者: ZCF
  221          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  222          //========================================================================
  223          void OLED_BuffClear(void)     //清屏
  224          {
  225   1          memset(ShowBUFF,0,128*8);
  226   1      }
  227          
  228          //========================================================================
  229          // 函数名称: OLED_BuffShow
  230          // 函数功能: OLED刷新显示
  231          // 入口参数: 无
  232          // 函数返回: 无
  233          // 当前版本: VER1.0
  234          // 修改日期: 2023 - 6 - 7
  235          // 当前作者: ZCF
  236          // 其他备注:
  237          //========================================================================
  238          void OLED_BuffShow(void)     
  239          {
  240   1          unsigned char xdata i,n;
  241   1      
  242   1          for(i=0;i<8;i++)
  243   1          {
  244   2             OLED_WR_Byte(0xb0+i,OLED_CMD); //设置行起始地址
*** WARNING C188 IN LINE 244 OF oled.c: 'parameter 1': value truncated
  245   2             OLED_WR_Byte(0x00,OLED_CMD);   //设置低列起始地址
  246   2             OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
  247   2      
  248   2             for(n=0;n<128;n++)
  249   2               OLED_WR_Byte(ShowBUFF[i][n],OLED_DATA);
  250   2          }
  251   1      }
  252          
  253          //========================================================================
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 5   

  254          // 函数名称: OLED_BuffShowPoint
  255          // 函数功能: OLED显示一个点
  256          // 入口参数: @x：x起点   @y:y起点
  257          // 函数返回: 无
  258          // 当前版本: VER1.0
  259          // 修改日期: 2023 - 6 - 7
  260          // 当前作者: ZCF
  261          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  262          //========================================================================
  263          void OLED_BuffShowPoint(unsigned char x,unsigned char y)     //OLED显示一个点
  264          {
  265   1          ShowBUFF[y/8][x] |= 1<<(y%8);
  266   1      }
  267          
  268          //========================================================================
  269          // 函数名称: OLED_BuffShowPoint
  270          // 函数功能: OLED显示一条线
  271          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  272          // 函数返回: 无
  273          // 当前版本: VER1.0
  274          // 修改日期: 2023 - 6 - 7
  275          // 当前作者: ZCF
  276          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  277          //========================================================================
  278          void OLED_BuffShowLine( unsigned char x1, unsigned char y1, unsigned char x2,unsigned char y2)
  279          {
  280   1          unsigned char x,y;
  281   1          if( x1>x2 )
  282   1          {
  283   2              x=x1;x1=x2;x2=x;
  284   2              y=y1;y1=y2;y2=y;
  285   2          }
  286   1          if(x1!=x2)
  287   1          {
  288   2              for( x = x1; x <= x2; x++ )
  289   2              {
  290   3                  if( y2>y1 )
  291   3                      OLED_BuffShowPoint(x, (unsigned char)(y1+(unsigned int)(y2-y1)*(unsigned int)x/(unsigned 
             -int)(x2-x1)));
  292   3                  else
  293   3                      OLED_BuffShowPoint(x, (unsigned char)(y1-(unsigned int)(y1-y2)*(unsigned int)x/(unsigned 
             -int)(x2-x1)));
  294   3              }        
  295   2          }
  296   1          else
  297   1          {
  298   2              if( y1>y2 )
  299   2              {
  300   3                  for( y = y2; y <= y1; y++ )
  301   3                     OLED_BuffShowPoint(x1, y); 
  302   3              }
  303   2              else
  304   2              {
  305   3                  for( y = y1; y <= y2; y++ )
  306   3                     OLED_BuffShowPoint(x1, y);             
  307   3              }
  308   2          }
  309   1      }
  310          
  311          //========================================================================
  312          // 函数名称: OLED_BuffShowRectangle
  313          // 函数功能: OLED显示一个矩形
  314          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  315          // 函数返回: 无
  316          // 当前版本: VER1.0
  317          // 修改日期: 2023 - 6 - 7
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 6   

  318          // 当前作者: ZCF
  319          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  320          //========================================================================
  321          void OLED_BuffShowRectangle(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
  322          {
  323   1          OLED_BuffShowLine(x1, y1, x2, y1);
  324   1          OLED_BuffShowLine(x1, y1, x1, y2);
  325   1          OLED_BuffShowLine(x1, y2, x2, y2);
  326   1          OLED_BuffShowLine(x2, y1, x2, y2);
  327   1      }
  328          
  329          //========================================================================
  330          // 函数名称: OLED_BuffShowCircle
  331          // 函数功能: OLED显示一个圆形
  332          // 入口参数: @x：x点  @y：y点  @r:半径
  333          // 函数返回: 无
  334          // 当前版本: VER1.0
  335          // 修改日期: 2023 - 6 - 7
  336          // 当前作者: ZCF
  337          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  338          //========================================================================
  339          void OLED_BuffShowCircle(unsigned char x, unsigned char y, unsigned char r)
  340          {
  341   1          int a, b;
  342   1          int di;
  343   1          a = 0;
  344   1          b = r;
  345   1          di = 3 - (r << 1);       //判断下个点位置的标志
  346   1       
  347   1          while (a <= b)
  348   1          {
  349   2              OLED_BuffShowPoint(x + a, y - b);        //5
*** WARNING C188 IN LINE 349 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 349 OF oled.c: 'parameter 2': value truncated
  350   2              OLED_BuffShowPoint(x + b, y - a);        //0
*** WARNING C188 IN LINE 350 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 350 OF oled.c: 'parameter 2': value truncated
  351   2              OLED_BuffShowPoint(x + b, y + a);        //4
*** WARNING C188 IN LINE 351 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 351 OF oled.c: 'parameter 2': value truncated
  352   2              OLED_BuffShowPoint(x + a, y + b);        //6
*** WARNING C188 IN LINE 352 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 352 OF oled.c: 'parameter 2': value truncated
  353   2              OLED_BuffShowPoint(x - a, y + b);        //1
*** WARNING C188 IN LINE 353 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 353 OF oled.c: 'parameter 2': value truncated
  354   2              OLED_BuffShowPoint(x - b, y + a);
*** WARNING C188 IN LINE 354 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 354 OF oled.c: 'parameter 2': value truncated
  355   2              OLED_BuffShowPoint(x - a, y - b);        //2
*** WARNING C188 IN LINE 355 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 355 OF oled.c: 'parameter 2': value truncated
  356   2              OLED_BuffShowPoint(x - b, y - a);        //7
*** WARNING C188 IN LINE 356 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 356 OF oled.c: 'parameter 2': value truncated
  357   2              a++;
  358   2       
  359   2              //使用Bresenham算法画圆
  360   2              if (di < 0)di += 4 * a + 6;
  361   2              else
  362   2              {
  363   3                  di += 10 + 4 * (a - b);
  364   3                  b--;
  365   3              }
  366   2          }
  367   1      }
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 7   

  368          
  369          //========================================================================
  370          // 函数名称: OLED_BuffShowChar
  371          // 函数功能: OLED显示一个8*16的字符
  372          // 入口参数: @x：x点  @y：y点  @asc:字符   @mode：0正显  1反显
  373          // 函数返回: 无
  374          // 当前版本: VER1.0
  375          // 修改日期: 2023 - 6 - 7
  376          // 当前作者: ZCF
  377          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  378          //========================================================================
  379          void OLED_BuffShowChar(unsigned char x,unsigned char y,char asc, unsigned char mode)     //OLED显示一个8*
             -16字符
  380          {
  381   1          unsigned char j,k;
  382   1          for( j=0;j<2;j++ )
  383   1          {
  384   2              for( k=0;k<8;k++ )
  385   2              {
  386   3                  if(mode==0)            
  387   3                      ShowBUFF[j+y][x+k]=Ascll_16[(asc-' ')*2][j*8+k];
  388   3                  else
  389   3                      ShowBUFF[j+y][x+k]=~Ascll_16[(asc-' ')*2][j*8+k];
  390   3              }
  391   2          }    
  392   1      }
  393          
  394          //========================================================================
  395          // 函数名称: OLED_BuffShowGBK
  396          // 函数功能: OLED显示汉字
  397          // 入口参数: @x：x点  @y：y点  @gbk:汉字   @mode：0正显  1反显
  398          // 函数返回: 无
  399          // 当前版本: VER1.0
  400          // 修改日期: 2023 - 6 - 7
  401          // 当前作者: ZCF
  402          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  403          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  404          //========================================================================
  405          void OLED_BuffShowGBK(unsigned char x,unsigned char y,char *gbk,unsigned char mode)     //OLED显示一个16*
             -16汉字
  406          {
  407   1          unsigned char i;
  408   1          unsigned char j,k;
  409   1          for( i=0;i<200;i++ )
  410   1          {
  411   2              if(( gbk[0]== GBK16[i].gbn_bum[0] )&&( gbk[1]== GBK16[i].gbn_bum[1] ))
  412   2              {
  413   3                  for( j=0;j<2;j++ )
  414   3                  {
  415   4                      for( k=0;k<16;k++ )
  416   4                      {
  417   5                          if( mode ==0 )
  418   5                              ShowBUFF[j+y][x+k]=GBK16[i].gbk_font[j*16+k];
  419   5                          else
  420   5                              ShowBUFF[j+y][x+k]=~GBK16[i].gbk_font[j*16+k];
  421   5                      }
  422   4                  }
  423   3                  break;
  424   3              }
  425   2          }    
  426   1      }
  427          
  428          //========================================================================
  429          // 函数名称: OLED_BuffShowString
  430          // 函数功能: OLED显示字符串。汉字字符均可
  431          // 入口参数: @x：x点  @y：y点  @s字符串   @mode：0正显  1反显
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 8   

  432          // 函数返回: 无
  433          // 当前版本: VER1.0
  434          // 修改日期: 2023 - 6 - 7
  435          // 当前作者: ZCF
  436          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  437          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  438          //========================================================================
  439          void OLED_BuffShowString(unsigned char x,unsigned char y,char *s,unsigned char mode)
  440          {
  441   1          char s_num[2];
  442   1        while(*s != '\0')       //字符串不为空，循环
  443   1        {
  444   2              if ((unsigned char)*s < 0x80)     //根据输入数据的大小判断是字符还是汉字，
  445   2              {
  446   3                  OLED_BuffShowChar(x,y,*s,mode);
  447   3                  x+=8;
  448   3                  s++;
  449   3              }
  450   2              else
  451   2              {
  452   3                  s_num[0] = *s ;
  453   3                  s_num[1] = *(s+1) ;
  454   3                  OLED_BuffShowGBK(x,y,s_num,mode);
  455   3                  x+=16;
  456   3                  s+=2;
  457   3              }
  458   2          if(x>127)
  459   2              {
  460   3                  x=0;
  461   3                  y+=2;
  462   3              }
  463   2        }       
  464   1      }
  465          
  466          //========================================================================
  467          // 函数名称: OLED_BuffShowNum
  468          // 函数功能: OLED显示整形变量
  469          // 入口参数: @x：x点  @y：y点  @num：整形变量   @mode：0正显  1反显
  470          // 函数返回: 无
  471          // 当前版本: VER1.0
  472          // 修改日期: 2023 - 6 - 7
  473          // 当前作者: ZCF
  474          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  475          //========================================================================
  476          void OLED_BuffShowNum(unsigned char x,unsigned char y,long num,unsigned char mode)
  477          {
  478   1          unsigned char xdata str[10];
  479   1          memset(str,0,10);
  480   1          sprintf(str,"%ld",num);
  481   1          OLED_BuffShowString(x,y,(unsigned char*)str);
*** WARNING C96 IN LINE 481 OF oled.c: 'OLED_BuffShowString': too few actual parameters
  482   1      }
*** WARNING C47 IN LINE 476 OF oled.c: 'mode': unreferenced parameter
  483          
  484          //========================================================================
  485          // 函数名称: OLED_BuffShowNum02F
  486          // 函数功能: OLED显示一个两位小数变量
  487          // 入口参数: @x：x点  @y：y点  @num：小数变量   @mode：0正显  1反显
  488          // 函数返回: 无
  489          // 当前版本: VER1.0
  490          // 修改日期: 2023 - 6 - 7
  491          // 当前作者: ZCF
  492          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  493          //========================================================================
  494          void OLED_BuffShowNum02F(unsigned char x,unsigned char y,float num,unsigned char mode)
  495          {
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 9   

  496   1          unsigned char xdata str[10];
  497   1          memset(str,0,10);
  498   1          sprintf(str,"%.2f",num);
  499   1          OLED_BuffShowString(x,y,(unsigned char*)str,mode);
  500   1      }
  501          
  502          
  503          //========================================================================
  504          // 函数名称: OLED_BuffShowChar32
  505          // 函数功能: OLED显示16*32的字符
  506          // 入口参数: @x：x点  @y：y点  @num：显示第几个字符   @mode：0正显  1反显
  507          // 函数返回: 无
  508          // 当前版本: VER1.0
  509          // 修改日期: 2023 - 6 - 7
  510          // 当前作者: ZCF
  511          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  512          //          用到的需要自己取模哦
  513          //========================================================================
  514          void OLED_BuffShowChar32(unsigned char  x,unsigned char  y,unsigned char num, unsigned char mode)     
  515          {
  516   1          unsigned char j,k;
  517   1          for( j=0;j<4;j++ )
  518   1          {
  519   2              for( k=0;k<16;k++ )
  520   2              {
  521   3                  if( mode==0 )
  522   3                      ShowBUFF[j+y][x+k]=lib_num1632[num][j*16+k];
  523   3                  else
  524   3                      ShowBUFF[j+y][x+k]=~lib_num1632[num][j*16+k];
  525   3              }
  526   2          }            
  527   1      }
  528          
  529          
  530          //========================================================================
  531          // 函数名称: OLED_BuffShowBMP
  532          // 函数功能: OLED缓存写入图片
  533          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  534          // 函数返回: 无
  535          // 当前版本: VER1.0
  536          // 修改日期: 2023 - 6 - 7
  537          // 当前作者: ZCF
  538          // 其他备注:
  539          //========================================================================
  540          void OLED_BuffShowBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char
             - BMP[])
  541          {   
  542   1          unsigned int xdata num=0;
  543   1          unsigned char k,j;
  544   1          
  545   1          for( j=0;j<y1;j++ )
  546   1          {
  547   2              for( k=0;k<x1;k++ )
  548   2              {
  549   3                  ShowBUFF[j+y0][x0+k]=BMP[num++];
  550   3              }
  551   2          }  
  552   1      } 
  553           


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      5225     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  oled                                                               27/03/24  16:12:37  PAGE 10  

  pdata size           =    ------     ------
  xdata size           =      1024         23
  xdata-const size     =    ------     ------
  edata size           =    ------         23
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         9     ------
End of Module Information.


C251 COMPILATION COMPLETE.  19 WARNING(S),  0 ERROR(S)
