C251 COMPILER V5.60.0,  zf_spi                                                             08/04/24  13:47:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_spi
OBJECT MODULE PLACED IN .\Out_File\zf_spi.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_spi.c XSMALL INTR2 WARNINGLEVEL(
                    -3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree
                    -_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_File\zf_spi.lst) TABS
                    -(2) OBJECT(.\Out_File\zf_spi.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,逐飞科技
    4           * All rights reserved.
    5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
    6           *
    7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
    8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
    9           *
   10           * @file          spi
   11           * @company       成都逐飞科技有限公司
   12           * @author        逐飞科技(QQ790875685)
   13           * @version       查看doc内version文件 版本说明
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32G12K128
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          #pragma warning disable = 47
   20          
   21          #include "zf_gpio.h"
   22          #include "zf_spi.h"
   23          
   24          
   25          
   26          //-------------------------------------------------------------------------------------------------------
             -------------
   27          //  @brief      spi初始化函数(ss引脚由软件控制)
   28          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
   29          //  @param      sck_pin     选择SCK引脚
   30          //  @param      mosi_pin    选择MOSI引脚
   31          //  @param      miso_pin    选择MISO引脚
   32          //  @param      mstr      主从选择
   33          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL
             -=1 CPHA=1 //具体细节可自行百度
   34          //  @param      baud      速率选择
   35          //  @since      v1.0
   36          //  Sample usage:       spi_init(SPI_1, SPI1_SCLK_P15, SPI1_MOSI_P13, SPI1_MISO_P14, 0, MASTER, SYSclk_DIV_4
             -);  
   37          //                //初始化SPI1,主机模式,速率为系统频率/4，SCLK引脚P1.5 MOSI引脚P1.3 MISO引脚P1.4,SPI模式0
   38          //-------------------------------------------------------------------------------------------------------
             -------------
   39          void spi_init(SPIN_enum spi_n,
   40                  SPI_PIN_enum sck_pin, 
   41                  SPI_PIN_enum mosi_pin, 
   42                  SPI_PIN_enum miso_pin, 
   43                  uint8 mode,
   44                  SPI_MSTR_enum mstr,
   45                  SPI_BAUD_enum baud)
   46          {
   47   1        //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
   48   1        if(sck_pin != SPI_NULL_PIN)
   49   1        {
   50   2          gpio_mode(sck_pin & 0xFF,GPIO);
C251 COMPILER V5.60.0,  zf_spi                                                             08/04/24  13:47:30  PAGE 2   

   51   2        }
   52   1        
   53   1        if(mosi_pin != SPI_NULL_PIN)
   54   1        {
   55   2          gpio_mode(mosi_pin & 0xFF,GPIO);
   56   2        }
   57   1        
   58   1        if(miso_pin != SPI_NULL_PIN)
   59   1        {
   60   2          gpio_mode(miso_pin & 0xFF,GPIO);
   61   2        }
   62   1      
   63   1        
   64   1        P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
   65   1          switch(spi_n)
   66   1          {
   67   2          case SPI_CH1:
   68   2              P_SW1 |= (0x00<<2);
   69   2              break;
   70   2          case SPI_CH2:
   71   2              P_SW1 |= (0x01<<2);
   72   2              break;
   73   2          case SPI_CH3:
   74   2              P_SW1 |= (0x02<<2);
   75   2              break;
   76   2          case SPI_CH4:
   77   2              P_SW1 |= (0x03<<2);
   78   2              break;
   79   2          }
   80   1        
   81   1        SPCTL &= 0xF3;    //清除SPI极性和相位
   82   1        switch(mode)
   83   1        {
   84   2        case 0:
   85   2          
   86   2          break;
   87   2        case 1:
   88   2          SPCTL |= 0x01<<2;
   89   2          break;
   90   2        case 2:
   91   2          SPCTL |= 0x02<<2;
   92   2          break;
   93   2        case 3:
   94   2          SPCTL |= 0x03<<2;
   95   2          break;
   96   2        }
   97   1          
   98   1        
   99   1        SPCTL |= baud;    //速率设定
  100   1      
  101   1          if(mstr == MASTER)
  102   1          {
  103   2              SPCTL |= 1<<7;  //忽略SS引脚功能，使用MSTR确定器件是主机还是从机
  104   2              SPCTL |= 1<<4;  //主机模式
  105   2          }
  106   1          else
  107   1          {
  108   2              //不做操作
  109   2          }
  110   1          SPCTL |= 1<<6;    //使能SPI功能
  111   1      }
  112          
  113          
  114          
  115          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_spi                                                             08/04/24  13:47:30  PAGE 3   

  116          //  @brief      SPI发送接收函数
  117          //  @param      dat           发送的数据
  118          //  @since      v1.0
  119          //  Sample usage:       buf_1 = spi_mosi(buf);    //发送buf的内容，并接收到buf_1里，长度为1字节
  120          //-------------------------------------------------------------------------------------------------------
             -------------
  121          uint8 spi_mosi(uint8 dat)
  122          {
  123   1          SPDAT = dat;          //DATA寄存器赋值
  124   1          while (!(SPSTAT & 0x80));     //查询完成标志
  125   1          SPSTAT = 0xc0;                  //清中断标志
  126   1        return SPDAT;
  127   1      }
  128          
  129          
  130          //-------------------------------------------------------------------------------------------------------
             -------------
  131          //  @brief      spi引脚切换函数(ss引脚由软件控制)
  132          //  @param      spi_n     选择SPI模块(SPI_1-SPI_4)
  133          //  @param      sck_pin     选择SCK引脚
  134          //  @param      mosi_pin    选择MOSI引脚
  135          //  @param      miso_pin    选择MISO引脚
  136          //  Sample usage:       spi_change_pin(SPI_1,SPI1_SCLK_P15, SPI1_MOSI_P13,SPI1_MISO_P14); 
  137          //                //切换SPI引脚
  138          //-------------------------------------------------------------------------------------------------------
             -------------
  139          void spi_change_pin(SPIN_enum spi_n, SPI_PIN_enum sck_pin, SPI_PIN_enum mosi_pin, SPI_PIN_enum miso_pin)
  140          {
  141   1          P_SW1 &= ~(0x03<<2);  //清除SPI功能脚选择位
  142   1        switch(spi_n)
  143   1          {
  144   2        //IO口需要配置为：准双向口（传统8051端口模式，弱上拉）
  145   2          case SPI_CH1:
  146   2          gpio_mode(P1_3,GPO_PP);
  147   2          gpio_mode(P1_4,GPIO);
  148   2          gpio_mode(P1_5,GPO_PP);
  149   2              break;
  150   2          case SPI_CH2:
  151   2          gpio_mode(P2_3,GPO_PP);
  152   2          gpio_mode(P2_4,GPIO);
  153   2          gpio_mode(P2_5,GPO_PP);
  154   2              break;
  155   2          case SPI_CH3:
  156   2          gpio_mode(P4_0,GPO_PP);
  157   2          gpio_mode(P4_1,GPIO);
  158   2          gpio_mode(P4_3,GPO_PP);
  159   2              break;
  160   2          case SPI_CH4:
  161   2          gpio_mode(P3_4,GPO_PP);
  162   2          gpio_mode(P3_3,GPIO);
  163   2          gpio_mode(P3_2,GPO_PP);
  164   2              break;
  165   2          }
  166   1        
  167   1      
  168   1          switch(spi_n)
  169   1          {
  170   2          case SPI_CH1:
  171   2              P_SW1 |= (0x00<<2);
  172   2              break;
  173   2          case SPI_CH2:
  174   2              P_SW1 |= (0x01<<2);
  175   2              break;
  176   2          case SPI_CH3:
  177   2              P_SW1 |= (0x02<<2);
  178   2              break;
C251 COMPILER V5.60.0,  zf_spi                                                             08/04/24  13:47:30  PAGE 4   

  179   2          case SPI_CH4:
  180   2              P_SW1 |= (0x03<<2);
  181   2              break;
  182   2          }
  183   1      }
  184          
  185          
  186          
  187          //-------------------------------------------------------------------------------------------------------
             -------------
  188          //  @brief      spi模式切换函数
  189          //  @param      mode            SPI模式 0：CPOL=0 CPHA=0    1：CPOL=0 CPHA=1   2：CPOL=1 CPHA=0   3：CPOL
             -=1 CPHA=1 //具体细节可自行百度
  190          //  Sample usage:       
  191          //-------------------------------------------------------------------------------------------------------
             -------------
  192          void spi_change_mode(uint8 mode)
  193          {
  194   1        SPCTL &= 0xF7;    //清除SPI极性和相位
  195   1        switch(mode)
  196   1        {
  197   2        case 0:
  198   2          
  199   2          break;
  200   2        case 1:
  201   2          SPCTL |= 0x01<<2;
  202   2          break;
  203   2        case 2:
  204   2          SPCTL |= 0x02<<2;
  205   2          break;
  206   2        case 3:
  207   2          SPCTL |= 0x03<<2;
  208   2          break;
  209   2        }
  210   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       466     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =        17     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
