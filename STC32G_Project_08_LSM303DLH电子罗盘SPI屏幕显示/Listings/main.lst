C251 COMPILER V5.60.0,  main                                                               06/04/24  17:11:56  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE INCDIR(.\Internals;.\Externals) DEBUG PRINT
                    -(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          /*-----------------------------------------------------------------------------------------
    2          * 请勿更改此文件编码！
    3          * 必须保持为默认编码GB2312，否则汉字无法正常显示！
    4          
    5          * 时钟选择 24MHz
    6          * 按键为 P1.0/1.1/1.3/1.4
    7          
    8          * --------------------------I2C-LSM303DLH模块-电子罗盘加速度计-----------------------------
    9              - 默认使用P3.2/P3.3端口，修改请看 iic.c -> IIC_Init() 函数。
   10          
   11          * -----------------------------------SPI-OLED显示屏----------------------------------------
   12              - 连接屏幕默认使用端口为：
   13                D0 - P2.5(SCLK)
   14                D1 - P2.3(MOSI)
   15                CS - P2.2(CS)
   16                DC - P2.1(DC)
   17                RES - P2.0(RES)
   18                修改请看 spi.h 和 spi.c
   19          
   20          * 本实验仅实现SPI-OLED屏幕和LSM303DLH模块的功能，未结合激光测距模块
   21              
   22              由于硬件原因，按键KEY4-KEY1和屏幕的横向显示方向是反的，即屏幕左下角按键对应的是KEY4。
   23              如果需要修改，建议直接修改sbit key的定义。
   24          
   25          * 注意：本程序仅供学习参考，请勿用于商业用途。
   26          -----------------------------------------------------------------------------------------*/
   27          #include <STRING.H>
   28          #include <STC32G.H>
   29          #include <STDIO.H>
   30          #include "oled.h"
   31          #include "pic.h"
   32          #include "iic.h"
   33          #include "lsm303.h"
   34          
   35          // 定义按键引脚
   36          sbit key1 = P1^0;
   37          sbit key2 = P1^1;
   38          sbit key3 = P1^3;
   39          sbit key4 = P1^4;
   40          unsigned char key1_up_store = 1; // 按键1状态暂存
   41          unsigned char key2_up_store = 1; // 按键2状态暂存
   42          unsigned char key3_up_store = 1; // 按键3状态暂存
   43          unsigned char key4_up_store = 1; // 按键4状态暂存
   44          
   45          void OLED_LSM303DLH_Mag_Get_Angle()
   46          {
   47   1          double Mag_Angle;
   48   1          unsigned char Str[10];
   49   1          Mag_Angle = LSM303_Read_Mag_Angle();
   50   1          OLED_BuffShowString(0,0,"ANGLE:",0);
   51   1          sprintf(Str, "%f", Mag_Angle);
   52   1          OLED_BuffShowString(6*8,0,Str,0);
   53   1          OLED_BuffShow();
   54   1      }
   55          
   56          void OLED_LSM303DLH_AccX_GetDataNShow()
   57          {
   58   1          float Acc;
C251 COMPILER V5.60.0,  main                                                               06/04/24  17:11:56  PAGE 2   

   59   1          unsigned char Str[10];
   60   1          Acc = LSM303_Read_Acc('x');
   61   1          OLED_BuffShowString(0,2,"ACC X:",0);
   62   1          sprintf(Str, "%f", Acc);
   63   1          OLED_BuffShowString(6*8,2,Str,0);
   64   1          OLED_BuffShow();
   65   1      }
   66          
   67          void OLED_LSM303DLH_AccY_GetDataNShow()
   68          {
   69   1          float Acc;
   70   1          unsigned char Str[10];
   71   1          Acc = LSM303_Read_Acc('y');
   72   1          OLED_BuffShowString(0,4,"ACC Y:",0);
   73   1          sprintf(Str, "%f", Acc);
   74   1          OLED_BuffShowString(6*8,4,Str,0);
   75   1          OLED_BuffShow();
   76   1      }
   77          
   78          void OLED_LSM303DLH_AccZ_GetDataNShow()
   79          {
   80   1          float Acc;
   81   1          unsigned char Str[10];
   82   1          Acc = LSM303_Read_Acc('z');
   83   1          OLED_BuffShowString(0,6,"ACC Z:",0);
   84   1          sprintf(Str, "%f", Acc);
   85   1          OLED_BuffShowString(6*8,6,Str,0);
   86   1          OLED_BuffShow();
   87   1      }
   88          void OLED_LSM303DLH_UI_Init()
   89          {
   90   1          OLED_BuffClear();                       //清除全部缓存
   91   1      }
   92          
   93          void OLED_Loading()
   94          {
   95   1          OLED_BuffClear();                               //清除全部缓存
   96   1          OLED_BuffShowString(0,3,"   PLEASE WAIT  ",1);  //显示数据
   97   1          OLED_BuffShow();                                //将缓存写入显示屏显示
   98   1      }
   99          
  100          void key1_short_press()
  101          {
  102   1          // 短按键1功能
  103   1      }
  104          
  105          void key2_short_press()
  106          {
  107   1          // 短按键2功能
  108   1      }
  109          
  110          void key3_short_press()
  111          {
  112   1          // 短按键3功能
  113   1      }
  114          
  115          void key4_short_press()
  116          {
  117   1          // 短按键4功能
  118   1      }
  119          
  120          void key1_check()
  121          {
  122   1          if(key1 == 0 && key1_up_store == 1)
  123   1          {
  124   2              key1_up_store = 0; // 标记按键被按下
C251 COMPILER V5.60.0,  main                                                               06/04/24  17:11:56  PAGE 3   

  125   2              OLED_BuffShowString(13*8,6,"[-]",1);  //显示数据
  126   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  127   2          }
  128   1          if(key1 == 1 && key1_up_store == 0)
  129   1          {
  130   2              key1_up_store = 1; // 标记按键被释放
  131   2              key1_short_press(); // 触发短按键1功能
  132   2              OLED_BuffShowString(13*8,6,"[-]",0);  //显示数据
  133   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  134   2          }
  135   1      }
  136          
  137          void key2_check()
  138          {
  139   1          if(key2 == 0 && key2_up_store == 1)
  140   1          {
  141   2              key2_up_store = 0; // 标记按键被按下
  142   2              OLED_BuffShowString(10*8,6,"[+]",1);  //显示数据
  143   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  144   2          }
  145   1          if(key2 == 1 && key2_up_store == 0)
  146   1          {
  147   2              key2_up_store = 1; // 标记按键被释放
  148   2              key2_short_press(); // 触发短按键2功能
  149   2              OLED_BuffShowString(10*8,6,"[+]",0);  //显示数据
  150   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  151   2          }
  152   1      }
  153          
  154          void key3_check()
  155          {
  156   1          if(key3 == 0 && key3_up_store == 1)
  157   1          {
  158   2              key3_up_store = 0; // 标记按键被按下
  159   2          }
  160   1          if(key3 == 1 && key3_up_store == 0)
  161   1          {
  162   2              key3_up_store = 1; // 标记按键被释放
  163   2              key3_short_press(); // 触发短按键3功能
  164   2          }
  165   1      }
  166          
  167          void key4_check()
  168          {
  169   1          if(key4 == 0 && key4_up_store == 1)
  170   1          {
  171   2              key4_up_store = 0; // 标记按键被按下
  172   2          }
  173   1          if(key4 == 1 && key4_up_store == 0)
  174   1          {
  175   2              key4_up_store = 1; // 标记按键被释放
  176   2              key4_short_press(); // 触发短按键4功能
  177   2          }
  178   1      }
  179          
  180          void Sys_Init()
  181          {
  182   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  183   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
  184   1          CKCON = 0; //提高访问XRAM速度
  185   1      
  186   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
  187   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
  188   1          P1M0 = 0xff;   P1M1 = 0x00;   //设置为推挽输出
  189   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  190   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
C251 COMPILER V5.60.0,  main                                                               06/04/24  17:11:56  PAGE 4   

  191   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  192   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
  193   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
  194   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  195   1      }
  196          
  197          void main(void)
  198          {
  199   1          EA = 1;                             //开总中断
  200   1          Sys_Init();                         //系统初始化
  201   1          SPI_init();                         //SPI初始化
  202   1          OLED_Init();                        //OLED初始化
  203   1          OLED_BuffClear();                   //清除全部缓存
  204   1          OLED_BuffShow();                    //将缓存写入显示屏显示
  205   1          IIC_Init();                         //IIC初始化
  206   1          LSM303_Init();                      //LSM303初始化
  207   1          while (1)
  208   1          {
  209   2              key1_check();                   //检查按键1
  210   2              key2_check();                   //检查按键2
  211   2              key3_check();                   //检查按键3
  212   2              key4_check();                   //检查按键4
  213   2              LSM303_Acc_Init();              //LSM303加速度传感器初始化
  214   2              delay_ms(100);                  //延时10ms
  215   2              LSM303_Mag_Init();              //LSM303磁场传感器初始化
  216   2              OLED_LSM303DLH_Mag_Get_Angle(); //获取磁场角度并显示
  217   2              OLED_LSM303DLH_AccX_GetDataNShow(); //获取加速度X数据并显示
  218   2              OLED_LSM303DLH_AccY_GetDataNShow(); //获取加速度Y数据并显示
  219   2              OLED_LSM303DLH_AccZ_GetDataNShow(); //获取加速度Z数据并显示
  220   2              delay_ms(100);                  //延时10ms
  221   2          }
  222   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3742     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         4         40
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        76     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
