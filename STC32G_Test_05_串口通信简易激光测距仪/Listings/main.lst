C251 COMPILER V5.60.0,  main                                                               31/03/24  19:16:38  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\main.lst) TABS(2) OB
                    -JECT(.\Objects\main.obj) 

stmt  level    source

    1          /*-----------------------------------------------------------------------------------------
    2          / 请勿更改此文件编码！
    3          / 必须保持为默认编码GB2312，否则汉字无法正常显示！
    4          
    5          * 时钟选择 33.1776MHz
    6          * 按键为 P2.0~P2.3
    7          * 激光测距模块使用P3.6(RX)/P3.7(TX)
    8          * OLED显示屏使用P3.2/P3.3(I2C)
    9          
   10          * --------------------------------------OLED显示屏-----------------------------------------
   11              - 默认使用P3.2/P3.3端口，修改请看 iic.c -> IIC_Init() 函数。
   12          * ------------------------------------UART1串口通信----------------------------------------
   13              - 默认使用P3.6/P3.7为RX/TX，修改请看 uart.c -> Uart1_Config() 函数。
   14              - 如果实验P3.0/P3.1，可能导致无法下载程序。
   15              - 默认使用9600bps波特率（匹配激光测距模块），修改请看 uart.h 定义部分。
   16          
   17          * 作者注：
   18              受于时间限制，本程序只实现了连续测量的功能以及显示，按键功能也只实现了KEY4，单次测量等
   19              其他功能有预留指令代码，但没有具体实现，有兴趣可以自行加上。
   20              
   21              由于硬件原因，按键KEY4-KEY1和屏幕的横向显示方向是反的，即屏幕左下角按键对应的是KEY4。
   22              如果需要修改，建议直接修改sbit key的定义。
   23          
   24          * 注意：本程序仅供学习参考，请勿用于商业用途。
   25          -----------------------------------------------------------------------------------------*/
   26          #include <STRING.H>
   27          #include <STC32G.H>
   28          #include "oled.h"
   29          #include "pic.h"
   30          #include "uart.h"
   31          #include "laser_ranging.h"
   32          
   33          // 定义按键引脚
   34          sbit key1 = P2^0;
   35          sbit key2 = P2^1;
   36          sbit key3 = P2^2;
   37          sbit key4 = P2^3;
   38          unsigned char key1_up_store = 1; // 按键1状态暂存
   39          unsigned char key2_up_store = 1; // 按键2状态暂存
   40          unsigned char key3_up_store = 1; // 按键3状态暂存
   41          unsigned char key4_up_store = 1; // 按键4状态暂存
   42          unsigned int Timer1_Counter = 0; // 定时器0计数器
   43          unsigned char OLED_Refesh_Flag = 0; // OLED刷新标志位
   44          unsigned char LaserRanging_State = 0; // 激光状态
   45          
   46          
   47          void OLED_LaserRanging_UI_OnOff()
   48          {
   49   1          if(!LaserRanging_State)
   50   1          {
   51   2              OLED_BuffShowString(0,6,"OFF",0);  //显示数据
   52   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
   53   2          }
   54   1          else
   55   1          {
   56   2              OLED_BuffShowString(0,6,"ON ",0);  //显示数据
   57   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
   58   2          }
C251 COMPILER V5.60.0,  main                                                               31/03/24  19:16:38  PAGE 2   

   59   1      }
   60          
   61          void OLED_LaserRanging_UI_Range()
   62          {
   63   1          if(LaserRanging_Range == 5)
   64   1          {
   65   2              OLED_BuffShowString(8*(16-4),0," ",1);
   66   2              OLED_BuffShowNum(8*(16-3),0,LaserRanging_Range,1);
   67   2              OLED_BuffShowString(8*(16-2),0,"米",1);
   68   2              OLED_BuffShow_NoInterrupt();                      //将缓存写入显示屏显示
   69   2          }
   70   1          else
   71   1          {
   72   2              OLED_BuffShowNum(8*(16-4),0,LaserRanging_Range,1);
   73   2              OLED_BuffShowString(8*(16-2),0,"米",1);
   74   2              OLED_BuffShow_NoInterrupt();                      //将缓存写入显示屏显示
   75   2          }
   76   1      }
   77          
   78          void OLED_LaserRanging_UI_Refresh()
   79          {
   80   1          OLED_BuffShowString(0,0,"激光测距        ",1);
   81   1          OLED_BuffShowString(0,2,"   按KEY4开始   ", 0);
   82   1          OLED_BuffShowString(0,6,"          [+][-]",0);
   83   1          OLED_BuffShow_NoInterrupt();                                //将缓存写入显示屏显示
   84   1      }
   85          
   86          void OLED_LaserRanging_UI_Init()
   87          {
   88   1          OLED_BuffClear();                           //清除全部缓存
   89   1          OLED_LaserRanging_UI_Refresh();             //刷新激光测距UI
   90   1          OLED_LaserRanging_UI_OnOff();               //显示激光测距状态
   91   1          OLED_LaserRanging_UI_Range();           //显示距离值
   92   1      }
   93          
   94          void OLED_Loading()
   95          {
   96   1          OLED_BuffClear();                               //清除全部缓存
   97   1          OLED_BuffShowString(0,3,"   PLEASE WAIT  ",1);  //显示数据
   98   1          OLED_BuffShow_NoInterrupt();                                //将缓存写入显示屏显示
   99   1      }
  100          
  101          void key1_short_press()
  102          {
  103   1          // 短按键1功能
  104   1          LaserRanging_State = 0;
  105   1          LaserRanging_Range_Decrease();
  106   1          OLED_LaserRanging_UI_Init();
  107   1      }
  108          
  109          void key2_short_press()
  110          {
  111   1          // 短按键2功能
  112   1          LaserRanging_State = 0;
  113   1          LaserRanging_Range_Increase();
  114   1          OLED_LaserRanging_UI_Init();
  115   1      }
  116          
  117          void key3_short_press()
  118          {
  119   1          // 短按键3功能
  120   1      }
  121          
  122          void key4_short_press()
  123          {
  124   1          // 短按键4功能
C251 COMPILER V5.60.0,  main                                                               31/03/24  19:16:38  PAGE 3   

  125   1          LaserRanging_State = !LaserRanging_State;
  126   1          OLED_LaserRanging_UI_OnOff();
  127   1          if(LaserRanging_State)  // 打开激光测距
  128   1          {
  129   2              LaserRanging_Continous();
  130   2              OLED_BuffShowString(0, 2, "  正在等待数据  ", 0);
  131   2              OLED_BuffShowString(0, 4, "  正在等待数据  ", 0);
  132   2              OLED_BuffShow_NoInterrupt();
  133   2          }
  134   1          else                    // 关闭激光测距
  135   1          {
  136   2              LaserRanging_LaserOff();
  137   2              OLED_BuffShowString(0, 4, "    测距暂停    ", 0);
  138   2              OLED_BuffShow_NoInterrupt();
  139   2          }
  140   1      }
  141          
  142          void key1_check() 
  143          {
  144   1          if(key1 == 0 && key1_up_store == 1)
  145   1          {
  146   2              key1_up_store = 0; // 标记按键被按下
  147   2              OLED_BuffShowString(13*8,6,"[-]",1);  //显示数据
  148   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  149   2          }
  150   1          if(key1 == 1 && key1_up_store == 0)
  151   1          {
  152   2              key1_up_store = 1; // 标记按键被释放
  153   2              key1_short_press(); // 触发短按键1功能
  154   2              OLED_BuffShowString(13*8,6,"[-]",0);  //显示数据
  155   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  156   2          }
  157   1      }
  158          
  159          void key2_check()
  160          {
  161   1          if(key2 == 0 && key2_up_store == 1)
  162   1          {
  163   2              key2_up_store = 0; // 标记按键被按下
  164   2              OLED_BuffShowString(10*8,6,"[+]",1);  //显示数据
  165   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  166   2          }
  167   1          if(key2 == 1 && key2_up_store == 0)
  168   1          {
  169   2              key2_up_store = 1; // 标记按键被释放
  170   2              key2_short_press(); // 触发短按键2功能
  171   2              OLED_BuffShowString(10*8,6,"[+]",0);  //显示数据
  172   2              OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  173   2          }
  174   1      }
  175          
  176          void key3_check()
  177          {
  178   1          if(key3 == 0 && key3_up_store == 1)
  179   1          {
  180   2              key3_up_store = 0; // 标记按键被按下
  181   2          }
  182   1          if(key3 == 1 && key3_up_store == 0)
  183   1          {
  184   2              key3_up_store = 1; // 标记按键被释放
  185   2              key3_short_press(); // 触发短按键3功能
  186   2          }
  187   1      }
  188          
  189          void key4_check()
  190          {
C251 COMPILER V5.60.0,  main                                                               31/03/24  19:16:38  PAGE 4   

  191   1          if(key4 == 0 && key4_up_store == 1)
  192   1          {
  193   2              key4_up_store = 0; // 标记按键被按下
  194   2              if(!LaserRanging_State)
  195   2              {
  196   3                  OLED_BuffShowString(0,6,"OFF",1);  //显示数据
  197   3                  OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  198   3              }
  199   2              else
  200   2              {
  201   3                  OLED_BuffShowString(0,6,"ON ",1);  //显示数据
  202   3                  OLED_BuffShow_NoInterrupt();                    //将缓存写入显示屏显示
  203   3              }
  204   2      
  205   2          }
  206   1          if(key4 == 1 && key4_up_store == 0)
  207   1          {
  208   2              key4_up_store = 1; // 标记按键被释放
  209   2              key4_short_press(); // 触发短按键4功能
  210   2          }
  211   1      }
  212          
  213          void Timer1_Isr(void) interrupt 3
  214          {
  215   1          unsigned char Freq_Hz = 1; // 刷新频率
  216   1          Timer1_Counter++;
  217   1          if (Timer1_Counter >= (1000/Freq_Hz)) // 1000ms/Freq_Hz
  218   1          {
  219   2              OLED_Refesh_Flag = 1;
  220   2              Timer1_Counter = 0;
  221   2          }
  222   1      }
  223          
  224          void Timer1_Init(void)    //1毫秒@33.1776MHz
  225          {
  226   1        TM1PS = 0x00;     //设置定时器时钟预分频 ( 注意:并非所有系列都有此寄存器,详情请查看数据手册 )
  227   1        AUXR |= 0x40;     //定时器时钟1T模式
  228   1        TMOD &= 0x0F;     //设置定时器模式
  229   1        TL1 = 0x66;       //设置定时初始值
  230   1        TH1 = 0x7E;       //设置定时初始值
  231   1        TF1 = 0;        //清除TF1标志
  232   1        TR1 = 1;        //定时器1开始计时
  233   1        ET1 = 1;        //使能定时器1中断
  234   1      }
  235          
  236          
  237          void Sys_Init()
  238          {
  239   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  240   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
  241   1          CKCON = 0; //提高访问XRAM速度
  242   1      
  243   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
  244   1          // P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
  245   1          P1M0 = 0xff;   P1M1 = 0x00;   //设置为推挽输出
  246   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  247   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
  248   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  249   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
  250   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
  251   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  252   1      }
  253          
  254          void main(void)
  255          {
  256   1          EA = 1;                             //开总中断
C251 COMPILER V5.60.0,  main                                                               31/03/24  19:16:38  PAGE 5   

  257   1          Sys_Init();                         //系统初始化
  258   1          Uart1_Init();                       //串口1初始化
  259   1          Uart_Port_Init();                   //串口端口初始化
  260   1          Timer1_Init();                      //定时器0初始化
  261   1          OLED_Init();                        //OLED初始化
  262   1          OLED_LaserRanging_UI_Init();        //初始化激光测距UI
  263   1          LaserRanging_Init();
  264   1          while (1)
  265   1          {
  266   2              key1_check();                   //检查按键1
  267   2              key2_check();                   //检查按键2
  268   2              key3_check();                   //检查按键3
  269   2              key4_check();                   //检查按键4
  270   2              if(OLED_Refesh_Flag)            //刷新OLED
  271   2              {
  272   3                  OLED_Refesh_Flag = 0;
  273   3                  EA = 0;
  274   3                  OLED_BuffShow_NoInterrupt();
  275   3                  EA = 1;
  276   3              }
  277   2          }
  278   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3866     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         8     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       156     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
