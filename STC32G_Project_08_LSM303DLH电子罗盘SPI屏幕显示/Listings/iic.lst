C251 COMPILER V5.60.0,  iic                                                                06/04/24  16:24:44  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE iic
OBJECT MODULE PLACED IN .\Objects\iic.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE Internals\iic.c XSMALL INTR2 BROWSE INCDIR(.\Internals;.\Externals) DE
                    -BUG PRINT(.\Listings\iic.lst) TABS(2) OBJECT(.\Objects\iic.obj) 

stmt  level    source

    1          #include "iic.h"
    2          #include <STC32G.H>
    3          
    4          //========================================================================
    5          // 函数名称: IIC_Init
    6          // 函数功能: IIC初始化
    7          // 入口参数: 无
    8          // 函数返回: 无
    9          // 当前版本: VER1.0
   10          // 修改日期: 2023 - 6 - 7
   11          // 当前作者: ZCF
   12          // 其他备注: 
   13          //========================================================================
   14          void IIC_Init()       //IIC初始化
   15          {
   16   1          I2C_S1 =2;              //I2C功能脚选择，00:P1.5,P1.4; 01:P2.5,P2.4; 11:P3.2,P3.3
   17   1          I2C_S0 =1;
   18   1          I2CCFG = 0XC0 + 0x0D; //设置速度MSSPEED[5:0]和使能IIC    
   19   1          // I2C总线速度  = SYS_CLK / 2 / (MSSPEED * 2 + 4)
   20   1          // 0x13 = 19d，394257.37 Hz，约等于400kHz
   21   1          // 0x3A = 58d, 100kHz @ 24MHz
   22   1          I2CMSST = 0;      //清空主机状态
   23   1          I2CMSAUX = 0;     //禁止自动发送ACK
   24   1      }
   25          
   26          //========================================================================
   27          // 函数名称: IIC_DELAY
   28          // 函数功能: IIC等待结束
   29          // 入口参数: 无
   30          // 函数返回: 无
   31          // 当前版本: VER1.0
   32          // 修改日期: 2023 - 6 - 7
   33          // 当前作者: ZCF
   34          // 其他备注: 
   35          //========================================================================
   36          void IIC_DELAY()  
   37          {
   38   1          while( !(I2CMSST & 0X40) );
   39   1          I2CMSST &= (~0X40);
   40   1      }
   41          
   42          //========================================================================
   43          // 函数名称: IIC_START
   44          // 函数功能: IIC开始
   45          // 入口参数: 无
   46          // 函数返回: 无
   47          // 当前版本: VER1.0
   48          // 修改日期: 2023 - 6 - 7
   49          // 当前作者: ZCF
   50          // 其他备注: 
   51          //========================================================================
   52          void IIC_START(void)  //IIC开始
   53          {
   54   1          I2CMSCR = 0X01;     //开始命令
   55   1          IIC_DELAY();      //等待结束
   56   1      }
   57          
   58          //========================================================================
C251 COMPILER V5.60.0,  iic                                                                06/04/24  16:24:44  PAGE 2   

   59          // 函数名称: IIC_STOP
   60          // 函数功能: IIC结束
   61          // 入口参数: 无
   62          // 函数返回: 无
   63          // 当前版本: VER1.0
   64          // 修改日期: 2023 - 6 - 7
   65          // 当前作者: ZCF
   66          // 其他备注: 
   67          //========================================================================
   68          void IIC_STOP(void)   //IIC结束
   69          {
   70   1          I2CMSCR = 0X06;     //结束命令
   71   1          IIC_DELAY();
   72   1      }
   73          
   74          //========================================================================
   75          // 函数名称: IIC_SENDACK
   76          // 函数功能: IIC发送ACK
   77          // 入口参数: 无
   78          // 函数返回: 无
   79          // 当前版本: VER1.0
   80          // 修改日期: 2023 - 6 - 7
   81          // 当前作者: ZCF
   82          // 其他备注: 
   83          //========================================================================
   84          void IIC_SENDACK(void)  //发送ACK
   85          {
   86   1          I2CMSST = 0X00;     //发送aCK
   87   1          I2CMSCR = 0X05;     //aCK命令
   88   1          IIC_DELAY();
   89   1      }
   90          
   91          //========================================================================
   92          // 函数名称: IIC_SENDNACK
   93          // 函数功能: IIC发送NACK
   94          // 入口参数: 无
   95          // 函数返回: 无
   96          // 当前版本: VER1.0
   97          // 修改日期: 2023 - 6 - 7
   98          // 当前作者: ZCF
   99          // 其他备注: 
  100          //========================================================================
  101          void IIC_SENDNACK(void) //发送NACK
  102          {
  103   1          I2CMSST = 0X01;     //发送naCK
  104   1          I2CMSCR = 0X05;     //aCK命令
  105   1          IIC_DELAY();
  106   1      }
  107          
  108          //========================================================================
  109          // 函数名称: IIC_WAITACK
  110          // 函数功能: IIC等到从机ACK
  111          // 入口参数: 无
  112          // 函数返回: 无
  113          // 当前版本: VER1.0
  114          // 修改日期: 2023 - 6 - 7
  115          // 当前作者: ZCF
  116          // 其他备注: 
  117          //========================================================================
  118          void IIC_WAITACK(void)  //等到从机ACK
  119          {
  120   1          I2CMSCR = 0X03;     //接收aCK
  121   1          IIC_DELAY();
  122   1      }
  123          
  124          //========================================================================
C251 COMPILER V5.60.0,  iic                                                                06/04/24  16:24:44  PAGE 3   

  125          // 函数名称: IIC_SENDBYTE
  126          // 函数功能: IIC发送一个字节
  127          // 入口参数: @dat：发送的数据
  128          // 函数返回: 无
  129          // 当前版本: VER1.0
  130          // 修改日期: 2023 - 6 - 7
  131          // 当前作者: ZCF
  132          // 其他备注: 
  133          //========================================================================
  134          void IIC_SENDBYTE(unsigned char dat)  //发送一个字节
  135          {
  136   1          I2CTXD = dat;     //发送的数据写入寄存器
  137   1          I2CMSCR = 0X02;     //发送
  138   1          IIC_DELAY();
  139   1      }
  140          
  141          //========================================================================
  142          // 函数名称: IIC_READBYTE
  143          // 函数功能: IIC读取一个字节
  144          // 入口参数: 无
  145          // 函数返回: 读到的数据
  146          // 当前版本: VER1.0
  147          // 修改日期: 2023 - 6 - 7
  148          // 当前作者: ZCF
  149          // 其他备注: 
  150          //========================================================================
  151          unsigned char IIC_READBYTE(void)  //读取一个字节
  152          {
  153   1          I2CMSCR = 0X04;     //发送
  154   1          IIC_DELAY();
  155   1          return I2CRXD;
  156   1      }
  157          
  158          
  159          //========================================================================
  160          // 函数名称: IIC_Write_NByte
  161          // 函数功能: IIC连续写入几个字节
  162          // 入口参数: @slave：从机地址  @addr：数据地址  @p:数组   @number：数据个数
  163          // 函数返回: 读到的数据
  164          // 当前版本: VER1.0
  165          // 修改日期: 2023 - 6 - 7
  166          // 当前作者: ZCF
  167          // 其他备注: 
  168          //========================================================================
  169          void IIC_Write_NByte( unsigned char slave,unsigned char addr,unsigned char *p,unsigned char number )  //ii
             -c写入连续的几个字节
  170          {
  171   1          IIC_START();
  172   1          IIC_SENDBYTE(slave);
  173   1          IIC_WAITACK();
  174   1      
  175   1          IIC_SENDBYTE(addr);
  176   1          IIC_WAITACK();
  177   1      
  178   1          do
  179   1          {
  180   2              IIC_SENDBYTE(*p);
  181   2              p++;
  182   2              IIC_WAITACK();
  183   2      
  184   2          }
  185   1          while(--number);
  186   1          IIC_STOP();
  187   1      }
  188          
  189          //========================================================================
C251 COMPILER V5.60.0,  iic                                                                06/04/24  16:24:44  PAGE 4   

  190          // 函数名称: IIC_Read_NByte
  191          // 函数功能: IIC连续读取几个字节
  192          // 入口参数: @slave：从机地址  @addr：数据地址  @p:数组   @number：数据个数
  193          // 函数返回: 读到的数据
  194          // 当前版本: VER1.0
  195          // 修改日期: 2023 - 6 - 7
  196          // 当前作者: ZCF
  197          // 其他备注: 
  198          //========================================================================
  199          void IIC_Read_NByte( unsigned char slave,unsigned char addr,unsigned char *p,unsigned char number ) //iic
             -读取连续的几个字节
  200          {
  201   1          IIC_START();
  202   1          IIC_SENDBYTE(slave);
  203   1          IIC_WAITACK();
  204   1      
  205   1          IIC_SENDBYTE(addr);
  206   1          IIC_WAITACK();
  207   1      
  208   1          IIC_START();
  209   1          IIC_SENDBYTE((unsigned char)(slave+0x01));  
  210   1          IIC_WAITACK();
  211   1      
  212   1          do
  213   1          {
  214   2              *p = IIC_READBYTE();  //P[0] => P[1]
  215   2              p++;
  216   2              if( number!=1 )
  217   2                  IIC_SENDACK();
  218   2          }
  219   1          while(--number);
  220   1          IIC_SENDNACK();
  221   1          IIC_STOP(); 
  222   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       366     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =    ------          6
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
