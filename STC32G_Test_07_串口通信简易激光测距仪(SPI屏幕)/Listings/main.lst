C251 COMPILER V5.60.0,  main                                                               03/04/24  18:58:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE INCDIR(.\Internals;.\Externals) DEBUG PRINT
                    -(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          /*-----------------------------------------------------------------------------------------
    2          * 请勿更改此文件编码！
    3          * 必须保持为默认编码GB2312，否则汉字无法正常显示！
    4          
    5          * 时钟选择 33.1776MHz
    6          * 按键为 P1.0/1.1/1.3/1.4
    7          * 激光测距模块端口设置见下方
    8          * OLED显示屏端口设置见下方
    9          
   10          * ------------------------------------UART1串口通信----------------------------------------
   11              - 默认使用P3.6/P3.7为RX/TX，修改请看 uart.c -> Uart1_Config() 函数。
   12              - 如果实验P3.0/P3.1，可能导致无法下载程序。
   13              - 默认使用9600bps波特率（匹配激光测距模块），修改请看 uart.h 定义部分。
   14          * -----------------------------------SPI-OLED显示屏----------------------------------------
   15              - 连接屏幕默认使用端口为：
   16                D0 - P2.5(SCLK)
   17                D1 - P2.3(MOSI)
   18                CS - P2.2(CS)
   19                DC - P2.1(DC)
   20                RES - P2.0(RES)
   21                修改请看 spi.h 和 spi.c
   22          
   23          * 作者注：
   24              受于时间限制，本程序只实现了连续测量的功能以及显示，按键功能也只实现了KEY4，单次测量等
   25              其他功能有预留指令代码，但没有具体实现，有兴趣可以自行加上。
   26              
   27              由于硬件原因，按键KEY4-KEY1和屏幕的横向显示方向是反的，即屏幕左下角按键对应的是KEY4。
   28              如果需要修改，建议直接修改sbit key的定义。
   29          
   30          * 注意：本程序仅供学习参考，请勿用于商业用途。
   31          -----------------------------------------------------------------------------------------*/
   32          #include <STRING.H>
   33          #include <STC32G.H>
   34          #include "oled.h"
   35          #include "pic.h"
   36          #include "uart.h"
   37          #include "laser_ranging.h"
   38          
   39          // 定义按键引脚
   40          sbit key1 = P1^0;
   41          sbit key2 = P1^1;
   42          sbit key3 = P1^3;
   43          sbit key4 = P1^4;
   44          unsigned char key1_up_store = 1; // 按键1状态暂存
   45          unsigned char key2_up_store = 1; // 按键2状态暂存
   46          unsigned char key3_up_store = 1; // 按键3状态暂存
   47          unsigned char key4_up_store = 1; // 按键4状态暂存
   48          unsigned int Timer1_Counter = 0; // 定时器0计数器
   49          unsigned char OLED_Refesh_Flag = 0; // OLED刷新标志位
   50          unsigned char LaserRanging_State = 0; // 激光状态
   51          
   52          
   53          void OLED_LaserRanging_UI_OnOff()
   54          {
   55   1          if(!LaserRanging_State)
   56   1          {
   57   2              OLED_BuffShowString(0,6,"OFF",0);  //显示数据
   58   2              OLED_BuffShow();                    //将缓存写入显示屏显示
C251 COMPILER V5.60.0,  main                                                               03/04/24  18:58:06  PAGE 2   

   59   2          }
   60   1          else
   61   1          {
   62   2              OLED_BuffShowString(0,6,"ON ",0);  //显示数据
   63   2              OLED_BuffShow();                    //将缓存写入显示屏显示
   64   2          }
   65   1      }
   66          
   67          void OLED_LaserRanging_UI_Range()
   68          {
   69   1          if(LaserRanging_Range == 5)
   70   1          {
   71   2              OLED_BuffShowString(8*(16-4),0," ",1);
   72   2              OLED_BuffShowNum(8*(16-3),0,LaserRanging_Range,1);
   73   2              OLED_BuffShowString(8*(16-2),0,"米",1);
   74   2              OLED_BuffShow();                      //将缓存写入显示屏显示
   75   2          }
   76   1          else
   77   1          {
   78   2              OLED_BuffShowNum(8*(16-4),0,LaserRanging_Range,1);
   79   2              OLED_BuffShowString(8*(16-2),0,"米",1);
   80   2              OLED_BuffShow();                      //将缓存写入显示屏显示
   81   2          }
   82   1      }
   83          
   84          void OLED_LaserRanging_UI_Refresh()
   85          {
   86   1          OLED_BuffShowString(0,0,"激光测距        ",1);
   87   1          OLED_BuffShowString(0,2,"   按KEY4开始   ", 0);
   88   1          OLED_BuffShowString(0,6,"          [+][-]",0);
   89   1          OLED_BuffShow();                                //将缓存写入显示屏显示
   90   1      }
   91          
   92          void OLED_LaserRanging_UI_Init()
   93          {
   94   1          OLED_BuffClear();                           //清除全部缓存
   95   1          OLED_LaserRanging_UI_Refresh();             //刷新激光测距UI
   96   1          OLED_LaserRanging_UI_OnOff();               //显示激光测距状态
   97   1          OLED_LaserRanging_UI_Range();           //显示距离值
   98   1      }
   99          
  100          void OLED_Loading()
  101          {
  102   1          OLED_BuffClear();                               //清除全部缓存
  103   1          OLED_BuffShowString(0,3,"   PLEASE WAIT  ",1);  //显示数据
  104   1          OLED_BuffShow();                                //将缓存写入显示屏显示
  105   1      }
  106          
  107          void key1_short_press()
  108          {
  109   1          // 短按键1功能
  110   1          LaserRanging_State = 0;
  111   1          LaserRanging_Range_Decrease();
  112   1          OLED_LaserRanging_UI_Init();
  113   1      }
  114          
  115          void key2_short_press()
  116          {
  117   1          // 短按键2功能
  118   1          LaserRanging_State = 0;
  119   1          LaserRanging_Range_Increase();
  120   1          OLED_LaserRanging_UI_Init();
  121   1      }
  122          
  123          void key3_short_press()
  124          {
C251 COMPILER V5.60.0,  main                                                               03/04/24  18:58:06  PAGE 3   

  125   1          // 短按键3功能
  126   1      }
  127          
  128          void key4_short_press()
  129          {
  130   1          // 短按键4功能
  131   1          LaserRanging_State = !LaserRanging_State;
  132   1          OLED_LaserRanging_UI_OnOff();
  133   1          if(LaserRanging_State)  // 打开激光测距
  134   1          {
  135   2              LaserRanging_Continous();
  136   2              OLED_BuffShowString(0, 2, "  正在等待数据  ", 0);
  137   2              OLED_BuffShowString(0, 4, "  正在等待数据  ", 0);
  138   2              OLED_BuffShow();
  139   2          }
  140   1          else                    // 关闭激光测距
  141   1          {
  142   2              LaserRanging_LaserOff();
  143   2              OLED_BuffShowString(0, 4, "    测距暂停    ", 0);
  144   2              OLED_BuffShow();
  145   2          }
  146   1      }
  147          
  148          void key1_check() 
  149          {
  150   1          if(key1 == 0 && key1_up_store == 1)
  151   1          {
  152   2              key1_up_store = 0; // 标记按键被按下
  153   2              OLED_BuffShowString(13*8,6,"[-]",1);  //显示数据
  154   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  155   2          }
  156   1          if(key1 == 1 && key1_up_store == 0)
  157   1          {
  158   2              key1_up_store = 1; // 标记按键被释放
  159   2              key1_short_press(); // 触发短按键1功能
  160   2              OLED_BuffShowString(13*8,6,"[-]",0);  //显示数据
  161   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  162   2          }
  163   1      }
  164          
  165          void key2_check()
  166          {
  167   1          if(key2 == 0 && key2_up_store == 1)
  168   1          {
  169   2              key2_up_store = 0; // 标记按键被按下
  170   2              OLED_BuffShowString(10*8,6,"[+]",1);  //显示数据
  171   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  172   2          }
  173   1          if(key2 == 1 && key2_up_store == 0)
  174   1          {
  175   2              key2_up_store = 1; // 标记按键被释放
  176   2              key2_short_press(); // 触发短按键2功能
  177   2              OLED_BuffShowString(10*8,6,"[+]",0);  //显示数据
  178   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  179   2          }
  180   1      }
  181          
  182          void key3_check()
  183          {
  184   1          if(key3 == 0 && key3_up_store == 1)
  185   1          {
  186   2              key3_up_store = 0; // 标记按键被按下
  187   2          }
  188   1          if(key3 == 1 && key3_up_store == 0)
  189   1          {
  190   2              key3_up_store = 1; // 标记按键被释放
C251 COMPILER V5.60.0,  main                                                               03/04/24  18:58:06  PAGE 4   

  191   2              key3_short_press(); // 触发短按键3功能
  192   2          }
  193   1      }
  194          
  195          void key4_check()
  196          {
  197   1          if(key4 == 0 && key4_up_store == 1)
  198   1          {
  199   2              key4_up_store = 0; // 标记按键被按下
  200   2              if(!LaserRanging_State)
  201   2              {
  202   3                  OLED_BuffShowString(0,6,"OFF",1);  //显示数据
  203   3                  OLED_BuffShow();                    //将缓存写入显示屏显示
  204   3              }
  205   2              else
  206   2              {
  207   3                  OLED_BuffShowString(0,6,"ON ",1);  //显示数据
  208   3                  OLED_BuffShow();                    //将缓存写入显示屏显示
  209   3              }
  210   2      
  211   2          }
  212   1          if(key4 == 1 && key4_up_store == 0)
  213   1          {
  214   2              key4_up_store = 1; // 标记按键被释放
  215   2              key4_short_press(); // 触发短按键4功能
  216   2          }
  217   1      }
  218          
  219          // void Timer1_Isr(void) interrupt 3
  220          // {
  221          //     unsigned char Freq_Hz = 20; // 刷新频率
  222          //     Timer1_Counter++;
  223          //     if (Timer1_Counter >= (1000/Freq_Hz)) // 1000ms/Freq_Hz
  224          //     {
  225          //         OLED_Refesh_Flag = 1;
  226          //         Timer1_Counter = 0;
  227          //     }
  228          // }
  229          
  230          // void Timer1_Init(void)   //1毫秒@33.1776MHz
  231          // {
  232          //  TM1PS = 0x00;     //设置定时器时钟预分频 ( 注意:并非所有系列都有此寄存器,详情请查看数据手册 )
  233          //  AUXR |= 0x40;     //定时器时钟1T模式
  234          //  TMOD &= 0x0F;     //设置定时器模式
  235          //  TL1 = 0x66;       //设置定时初始值
  236          //  TH1 = 0x7E;       //设置定时初始值
  237          //  TF1 = 0;        //清除TF1标志
  238          //  TR1 = 1;        //定时器1开始计时
  239          //  ET1 = 1;        //使能定时器1中断
  240          // }
  241          
  242          
  243          void Sys_Init()
  244          {
  245   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  246   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
  247   1          CKCON = 0; //提高访问XRAM速度
  248   1      
  249   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
  250   1          // P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
  251   1          P1M0 = 0xff;   P1M1 = 0x00;   //设置为推挽输出
  252   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  253   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
  254   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  255   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
  256   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
C251 COMPILER V5.60.0,  main                                                               03/04/24  18:58:06  PAGE 5   

  257   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  258   1      }
  259          
  260          void main(void)
  261          {
  262   1          EA = 1;                             //开总中断
  263   1          Sys_Init();                         //系统初始化
  264   1          SPI_Init();                         //SPI初始化
*** WARNING C140 IN LINE 264 OF main.c: 'SPI_Init' undefined; assuming 'extern int SPI_Init()'
  265   1          Uart1_Init();                       //UART1初始化
  266   1          Uart_Port_Init();                   //串口端口初始化
  267   1          // Timer1_Init();                      //定时器0初始化
  268   1          OLED_Init();                        //OLED初始化
  269   1          OLED_LaserRanging_UI_Init();        //初始化激光测距UI
  270   1          LaserRanging_Init();
  271   1          while (1)
  272   1          {
  273   2              key1_check();                   //检查按键1
  274   2              key2_check();                   //检查按键2
  275   2              key3_check();                   //检查按键3
  276   2              key4_check();                   //检查按键4
  277   2              if(OLED_Refesh_Flag)            //刷新OLED
  278   2              {
  279   3                  OLED_Refesh_Flag = 0;
  280   3                  EA = 0;
  281   3                  OLED_BuffShow();
  282   3                  EA = 1;
  283   3              }
  284   2          }
  285   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3791     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         8     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       156     ------
End of Module Information.


C251 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
