C251 COMPILER V5.60.0,  main                                                               06/04/24  15:09:00  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE main
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE main.c XSMALL INTR2 BROWSE INCDIR(.\Internals;.\Externals) DEBUG PRINT
                    -(.\Listings\main.lst) TABS(2) OBJECT(.\Objects\main.obj) 

stmt  level    source

    1          /*-----------------------------------------------------------------------------------------
    2          * 请勿更改此文件编码！
    3          * 必须保持为默认编码GB2312，否则汉字无法正常显示！
    4          
    5          * 时钟选择 33.1776MHz
    6          * 按键为 P1.0/1.1/1.3/1.4
    7          
    8          * --------------------------I2C-LSM303DLH模块-电子罗盘加速度计-----------------------------
    9              - 默认使用P3.2/P3.3端口，修改请看 iic.c -> IIC_Init() 函数。
   10          
   11          * -----------------------------------SPI-OLED显示屏----------------------------------------
   12              - 连接屏幕默认使用端口为：
   13                D0 - P2.5(SCLK)
   14                D1 - P2.3(MOSI)
   15                CS - P2.2(CS)
   16                DC - P2.1(DC)
   17                RES - P2.0(RES)
   18                修改请看 spi.h 和 spi.c
   19          
   20          * 本实验仅实现SPI-OLED屏幕和LSM303DLH模块的功能，未结合激光测距模块
   21              
   22              由于硬件原因，按键KEY4-KEY1和屏幕的横向显示方向是反的，即屏幕左下角按键对应的是KEY4。
   23              如果需要修改，建议直接修改sbit key的定义。
   24          
   25          * 注意：本程序仅供学习参考，请勿用于商业用途。
   26          -----------------------------------------------------------------------------------------*/
   27          #include <STRING.H>
   28          #include <STC32G.H>
   29          #include <STDIO.H>
   30          #include "oled.h"
   31          #include "pic.h"
   32          #include "iic.h"
   33          #include "lsm303.h"
   34          
   35          // 定义按键引脚
   36          sbit key1 = P1^0;
   37          sbit key2 = P1^1;
   38          sbit key3 = P1^3;
   39          sbit key4 = P1^4;
   40          unsigned char key1_up_store = 1; // 按键1状态暂存
   41          unsigned char key2_up_store = 1; // 按键2状态暂存
   42          unsigned char key3_up_store = 1; // 按键3状态暂存
   43          unsigned char key4_up_store = 1; // 按键4状态暂存
   44          
   45          void OLED_LSM303DLH_AccX_GetDataNShow()
   46          {
   47   1          float Acc;
   48   1          unsigned char Str[10];
   49   1          Acc = LSM303_Read_Mag('x');
   50   1          OLED_BuffShowString(0,0,"X:",0);
   51   1          sprintf(Str, "%f", Acc);
   52   1          OLED_BuffShowString(2*8,0,Str,0);
   53   1          OLED_BuffShow();
   54   1      }
   55          
   56          // void OLED_LSM303DLH_AccY_GetDataNShow()
   57          // {
   58          //     float Acc;
C251 COMPILER V5.60.0,  main                                                               06/04/24  15:09:00  PAGE 2   

   59          //     unsigned char Str[10];
   60          //     Acc = LSM303_Read_Mag('y');
   61          //     OLED_BuffShowString(0,2,"Y:",0);
   62          //     sprintf(Str, "%f", Acc);
   63          //     OLED_BuffShowString(2*8,2,Str,0);
   64          //     OLED_BuffShow();
   65          // }
   66          
   67          // void OLED_LSM303DLH_AccZ_GetDataNShow()
   68          // {
   69          //     float Acc;
   70          //     unsigned char Str[10];
   71          //     Acc = LSM303_Read_Mag('z');
   72          //     OLED_BuffShowString(0,4,"Z:",0);
   73          //     sprintf(Str, "%f", Acc);
   74          //     OLED_BuffShowString(2*8,4,Str,0);
   75          //     OLED_BuffShow();
   76          // }
   77          
   78          void OLED_LSM303DLH_UI_Init()
   79          {
   80   1          OLED_BuffClear();                       //清除全部缓存
   81   1      }
   82          
   83          void OLED_Loading()
   84          {
   85   1          OLED_BuffClear();                               //清除全部缓存
   86   1          OLED_BuffShowString(0,3,"   PLEASE WAIT  ",1);  //显示数据
   87   1          OLED_BuffShow();                                //将缓存写入显示屏显示
   88   1      }
   89          
   90          void key1_short_press()
   91          {
   92   1          // 短按键1功能
   93   1      }
   94          
   95          void key2_short_press()
   96          {
   97   1          // 短按键2功能
   98   1      }
   99          
  100          void key3_short_press()
  101          {
  102   1          // 短按键3功能
  103   1      }
  104          
  105          void key4_short_press()
  106          {
  107   1          // 短按键4功能
  108   1      }
  109          
  110          void key1_check()
  111          {
  112   1          if(key1 == 0 && key1_up_store == 1)
  113   1          {
  114   2              key1_up_store = 0; // 标记按键被按下
  115   2              OLED_BuffShowString(13*8,6,"[-]",1);  //显示数据
  116   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  117   2          }
  118   1          if(key1 == 1 && key1_up_store == 0)
  119   1          {
  120   2              key1_up_store = 1; // 标记按键被释放
  121   2              key1_short_press(); // 触发短按键1功能
  122   2              OLED_BuffShowString(13*8,6,"[-]",0);  //显示数据
  123   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  124   2          }
C251 COMPILER V5.60.0,  main                                                               06/04/24  15:09:00  PAGE 3   

  125   1      }
  126          
  127          void key2_check()
  128          {
  129   1          if(key2 == 0 && key2_up_store == 1)
  130   1          {
  131   2              key2_up_store = 0; // 标记按键被按下
  132   2              OLED_BuffShowString(10*8,6,"[+]",1);  //显示数据
  133   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  134   2          }
  135   1          if(key2 == 1 && key2_up_store == 0)
  136   1          {
  137   2              key2_up_store = 1; // 标记按键被释放
  138   2              key2_short_press(); // 触发短按键2功能
  139   2              OLED_BuffShowString(10*8,6,"[+]",0);  //显示数据
  140   2              OLED_BuffShow();                    //将缓存写入显示屏显示
  141   2          }
  142   1      }
  143          
  144          void key3_check()
  145          {
  146   1          if(key3 == 0 && key3_up_store == 1)
  147   1          {
  148   2              key3_up_store = 0; // 标记按键被按下
  149   2          }
  150   1          if(key3 == 1 && key3_up_store == 0)
  151   1          {
  152   2              key3_up_store = 1; // 标记按键被释放
  153   2              key3_short_press(); // 触发短按键3功能
  154   2          }
  155   1      }
  156          
  157          void key4_check()
  158          {
  159   1          if(key4 == 0 && key4_up_store == 1)
  160   1          {
  161   2              key4_up_store = 0; // 标记按键被按下
  162   2          }
  163   1          if(key4 == 1 && key4_up_store == 0)
  164   1          {
  165   2              key4_up_store = 1; // 标记按键被释放
  166   2              key4_short_press(); // 触发短按键4功能
  167   2          }
  168   1      }
  169          
  170          void Sys_Init()
  171          {
  172   1          WTST = 0;  //设置程序指令延时参数，赋值为0可将CPU执行指令的速度设置为最快
  173   1          EAXFR = 1; //扩展寄存器(XFR)访问使能
  174   1          CKCON = 0; //提高访问XRAM速度
  175   1      
  176   1          P0M1 = 0x00;   P0M0 = 0x00;   //设置为准双向口
  177   1          P1M1 = 0x00;   P1M0 = 0x00;   //设置为准双向口
  178   1          P1M0 = 0xff;   P1M1 = 0x00;   //设置为推挽输出
  179   1          P2M1 = 0x00;   P2M0 = 0x00;   //设置为准双向口
  180   1          P3M1 = 0x00;   P3M0 = 0x00;   //设置为准双向口
  181   1          P4M1 = 0x00;   P4M0 = 0x00;   //设置为准双向口
  182   1          P5M1 = 0x00;   P5M0 = 0x00;   //设置为准双向口
  183   1          P6M1 = 0x00;   P6M0 = 0x00;   //设置为准双向口
  184   1          P7M1 = 0x00;   P7M0 = 0x00;   //设置为准双向口
  185   1      }
  186          
  187          void main(void)
  188          {
  189   1          EA = 1;                             //开总中断
  190   1          Sys_Init();                         //系统初始化
C251 COMPILER V5.60.0,  main                                                               06/04/24  15:09:00  PAGE 4   

  191   1          SPI_init();                         //SPI初始化
  192   1          OLED_Init();                        //OLED初始化
  193   1          OLED_BuffClear();                   //清除全部缓存
  194   1          OLED_BuffShow();                    //将缓存写入显示屏显示
  195   1          IIC_Init();                         //IIC初始化
  196   1          LSM303_Init();                      //LSM303初始化
  197   1          while (1)
  198   1          {
  199   2              key1_check();                   //检查按键1
  200   2              key2_check();                   //检查按键2
  201   2              key3_check();                   //检查按键3
  202   2              key4_check();                   //检查按键4
  203   2              OLED_LSM303DLH_AccX_GetDataNShow(); //获取加速度X数据并显示
  204   2              // OLED_LSM303DLH_AccY_GetDataNShow(); //获取加速度Y数据并显示
  205   2              // OLED_LSM303DLH_AccZ_GetDataNShow(); //获取加速度Z数据并显示
  206   2              delay_ms(100);                  //延时100ms
  207   2          }
  208   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3527     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =         4         10
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        51     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
