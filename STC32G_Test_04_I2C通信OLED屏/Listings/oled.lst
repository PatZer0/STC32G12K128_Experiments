C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE oled
OBJECT MODULE PLACED IN .\Objects\oled.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE oled.c XSMALL INTR2 BROWSE DEBUG PRINT(.\Listings\oled.lst) TABS(2) OB
                    -JECT(.\Objects\oled.obj) 

stmt  level    source

    1          #include "oled.h"
    2          #include "font.h"
    3          #include <STDIO.H>
    4          #include <STC32G.H>
    5          #include <STRING.H>
    6          
    7          unsigned char xdata ShowBUFF[8][128];                           //OLED全局缓存
    8          
    9          //========================================================================
   10          // 函数名称: delay
   11          // 函数功能: OLED驱动用的延时
   12          // 入口参数: 无
   13          // 函数返回: 无
   14          // 当前版本: VER1.0
   15          // 修改日期: 2023 - 6 - 7
   16          // 当前作者: ZCF
   17          // 其他备注:
   18          //========================================================================
   19          void delay(void)
   20          {
   21   1          int xdata i;
   22   1          
   23   1          for (i=0; i<100; i++);
   24   1      }
   25          
   26          //========================================================================
   27          // 函数名称: delay_ms
   28          // 函数功能: ms延时函数
   29          // 入口参数: 无
   30          // 函数返回: 无
   31          // 当前版本: VER1.0
   32          // 修改日期: 2023 - 6 - 7
   33          // 当前作者: ZCF
   34          // 其他备注:
   35          //========================================================================
   36          void delay_ms(unsigned int ms)
   37          {
   38   1           unsigned int xdata i;
   39   1           do{
   40   2                i = MAIN_Fosc / 6000;
   41   2                while(--i);   //6T per loop
   42   2           }while(--ms);
   43   1      }
   44          
   45          //========================================================================
   46          // 函数名称: OLED_WR_Byte
   47          // 函数功能: OLED地址/数据写入函数
   48          // 入口参数: @dat:数据    @cmd:命令
   49          // 函数返回: 无
   50          // 当前版本: VER1.0
   51          // 修改日期: 2023 - 6 - 7
   52          // 当前作者: ZCF
   53          // 其他备注:
   54          //========================================================================
   55          void OLED_WR_Byte(unsigned char dat,unsigned char cmd)
   56          {
   57   1          unsigned char udat[1] ;
   58   1          udat[0] = dat;
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 2   

   59   1          if( cmd==1 )
   60   1              IIC_Write_NByte(0X78,0x40,udat,1);
   61   1          else
   62   1              IIC_Write_NByte(0X78,0x00,udat,1);
   63   1      }
   64          
   65          //========================================================================
   66          // 函数名称: OLED_Init
   67          // 函数功能: OLED初始化函数
   68          // 入口参数: 无
   69          // 函数返回: 无
   70          // 当前版本: VER1.0
   71          // 修改日期: 2023 - 6 - 7
   72          // 当前作者: ZCF
   73          // 其他备注:
   74          //========================================================================
   75          void OLED_Init(void)
   76          {
   77   1          IIC_Init();
   78   1          delay_ms(100);
   79   1          delay_ms(200);
   80   1      
   81   1      
   82   1          OLED_WR_Byte(0xAE,OLED_CMD);//--turn off oled panel
   83   1          OLED_WR_Byte(0x00,OLED_CMD);//---set low column address
   84   1          OLED_WR_Byte(0x10,OLED_CMD);//---set high column address
   85   1          OLED_WR_Byte(0x40,OLED_CMD);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F
             -)
   86   1          OLED_WR_Byte(0x81,OLED_CMD);//--set contrast control register
   87   1          OLED_WR_Byte(0xCF,OLED_CMD);// Set SEG Output Current Brightness
   88   1          OLED_WR_Byte(0xA1,OLED_CMD);//--Set SEG/Column Mapping     0xa0左右反置 0xa1正常
   89   1          OLED_WR_Byte(0xC8,OLED_CMD);//Set COM/Row Scan Direction   0xc0上下反置 0xc8正常
   90   1          OLED_WR_Byte(0xA6,OLED_CMD);//--set normal display
   91   1          OLED_WR_Byte(0xA8,OLED_CMD);//--set multiplex ratio(1 to 64)
   92   1          OLED_WR_Byte(0x3f,OLED_CMD);//--1/64 duty
   93   1          OLED_WR_Byte(0xD3,OLED_CMD);//-set display offset Shift Mapping RAM Counter (0x00~0x3F)
   94   1          OLED_WR_Byte(0x00,OLED_CMD);//-not offset
   95   1          OLED_WR_Byte(0xd5,OLED_CMD);//--set display clock divide ratio/oscillator frequency
   96   1          OLED_WR_Byte(0x80,OLED_CMD);//--set divide ratio, Set Clock as 100 Frames/Sec
   97   1          OLED_WR_Byte(0xD9,OLED_CMD);//--set pre-charge period
   98   1          OLED_WR_Byte(0xF1,OLED_CMD);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
   99   1          OLED_WR_Byte(0xDA,OLED_CMD);//--set com pins hardware configuration
  100   1          OLED_WR_Byte(0x12,OLED_CMD);
  101   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  102   1          OLED_WR_Byte(0x40,OLED_CMD);//Set VCOM Deselect Level
  103   1          OLED_WR_Byte(0x20,OLED_CMD);//-Set Page Addressing Mode (0x00/0x01/0x02)
  104   1          OLED_WR_Byte(0x02,OLED_CMD);//
  105   1          OLED_WR_Byte(0x8D,OLED_CMD);//--set Charge Pump enable/disable
  106   1          OLED_WR_Byte(0x14,OLED_CMD);//--set(0x10) disable
  107   1          OLED_WR_Byte(0xA4,OLED_CMD);// Disable Entire Display On (0xa4/0xa5)
  108   1          OLED_WR_Byte(0xA6,OLED_CMD);// Disable Inverse Display On (0xa6/a7) 
  109   1          OLED_WR_Byte(0xAF,OLED_CMD);
  110   1          OLED_BuffClear();
  111   1          OLED_BuffShow();
  112   1          OLED_DisplayOn();
  113   1      }
  114          
  115          
  116          //========================================================================
  117          // 函数名称: OLED_Set_Pos
  118          // 函数功能: OLED设置显示位置
  119          // 入口参数: @x:x坐标     @y:y坐标
  120          // 函数返回: 无
  121          // 当前版本: VER1.0
  122          // 修改日期: 2023 - 6 - 7
  123          // 当前作者: ZCF
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 3   

  124          // 其他备注:
  125          //========================================================================
  126          void OLED_Set_Pos(unsigned char x, unsigned char y) 
  127          { 
  128   1        OLED_WR_Byte((unsigned char)(0xb0+y),OLED_CMD);
  129   1        OLED_WR_Byte(((x&0xf0)>>4)|0x10,OLED_CMD);
  130   1        OLED_WR_Byte((x&0x0f),OLED_CMD); 
  131   1      }   
  132          
  133          
  134          //========================================================================
  135          // 函数名称: OLED_DrawBMP
  136          // 函数功能: OLED显示图片
  137          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  138          // 函数返回: 无
  139          // 当前版本: VER1.0
  140          // 修改日期: 2023 - 6 - 7
  141          // 当前作者: ZCF
  142          // 其他备注:
  143          //========================================================================
  144          void OLED_DrawBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char BMP
             -[])
  145          {   
  146   1          unsigned int xdata j=0;
  147   1          unsigned char xdata x,y;
  148   1      
  149   1          for(y=y0;y<(y1+y0);y++)
  150   1          {
  151   2              OLED_Set_Pos(x0,y);
  152   2              for(x=0;x<x1;x++)
  153   2              {      
  154   3                  OLED_WR_Byte(BMP[j++],OLED_DATA);       
  155   3              }
  156   2          }
  157   1      } 
  158          
  159          //========================================================================
  160          // 函数名称: OLED_DisplayOn
  161          // 函数功能: OLED开显示
  162          // 入口参数: 无
  163          // 函数返回: 无
  164          // 当前版本: VER1.0
  165          // 修改日期: 2023 - 6 - 7
  166          // 当前作者: ZCF
  167          // 其他备注:
  168          //========================================================================
  169          void OLED_DisplayOn(void)     //开显示
  170          {
  171   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
  172   1          OLED_WR_Byte(0x14,OLED_CMD);//开启电荷泵
  173   1          OLED_WR_Byte(0xAF,OLED_CMD);//点亮屏幕       
  174   1      }
  175            
  176          //========================================================================
  177          // 函数名称: OLED_DisplayOff
  178          // 函数功能: OLED关显示
  179          // 入口参数: 无
  180          // 函数返回: 无
  181          // 当前版本: VER1.0
  182          // 修改日期: 2023 - 6 - 7
  183          // 当前作者: ZCF
  184          // 其他备注:
  185          //========================================================================
  186          void OLED_DisplayOff(void)     //关显示
  187          {
  188   1          OLED_WR_Byte(0x8D,OLED_CMD);//电荷泵使能
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 4   

  189   1          OLED_WR_Byte(0x10,OLED_CMD);//关闭电荷泵
  190   1          OLED_WR_Byte(0xAF,OLED_CMD);//关闭屏幕        
  191   1      }
  192          
  193          //========================================================================
  194          // 函数名称: OLED_LightSet
  195          // 函数功能: OLED亮度设置
  196          // 入口参数: @num： 0-255
  197          // 函数返回: 无
  198          // 当前版本: VER1.0
  199          // 修改日期: 2023 - 6 - 7
  200          // 当前作者: ZCF
  201          // 其他备注:
  202          //========================================================================
  203          void OLED_LightSet(unsigned char num)     //亮度设置
  204          {
  205   1          OLED_WR_Byte(0x81,OLED_CMD);//
  206   1          OLED_WR_Byte(num,OLED_CMD);//  
  207   1          OLED_WR_Byte(0xDB,OLED_CMD);//--set vcomh
  208   1          OLED_WR_Byte(0x20,OLED_CMD);//Set VCOM Deselect Level   
  209   1      }
  210          
  211          
  212          //========================================================================
  213          // 函数名称: OLED_BuffClear
  214          // 函数功能: OLED清空缓存
  215          // 入口参数: 无
  216          // 函数返回: 无
  217          // 当前版本: VER1.0
  218          // 修改日期: 2023 - 6 - 7
  219          // 当前作者: ZCF
  220          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  221          //========================================================================
  222          void OLED_BuffClear(void)     //清屏
  223          {
  224   1          memset(ShowBUFF,0,128*8);
  225   1      }
  226          
  227          //========================================================================
  228          // 函数名称: OLED_BuffShow
  229          // 函数功能: OLED刷新显示
  230          // 入口参数: 无
  231          // 函数返回: 无
  232          // 当前版本: VER1.0
  233          // 修改日期: 2023 - 6 - 7
  234          // 当前作者: ZCF
  235          // 其他备注:
  236          //========================================================================
  237          void OLED_BuffShow(void)     
  238          {
  239   1          unsigned char xdata i,n;
  240   1      
  241   1          for(i=0;i<8;i++)
  242   1          {
  243   2             OLED_WR_Byte(0xb0+i,OLED_CMD); //设置行起始地址
*** WARNING C188 IN LINE 243 OF oled.c: 'parameter 1': value truncated
  244   2             OLED_WR_Byte(0x02,OLED_CMD);   //设置低列起始地址    // 2024.03.27修改低列起始，否则测试用屏幕显示
             -不全
  245   2             OLED_WR_Byte(0x10,OLED_CMD);   //设置高列起始地址
  246   2      
  247   2             for(n=0;n<128;n++)
  248   2               OLED_WR_Byte(ShowBUFF[i][n],OLED_DATA);
  249   2          }
  250   1      }
  251          
  252          //========================================================================
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 5   

  253          // 函数名称: OLED_BuffShowPoint
  254          // 函数功能: OLED显示一个点
  255          // 入口参数: @x：x起点   @y:y起点
  256          // 函数返回: 无
  257          // 当前版本: VER1.0
  258          // 修改日期: 2023 - 6 - 7
  259          // 当前作者: ZCF
  260          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  261          //========================================================================
  262          void OLED_BuffShowPoint(unsigned char x,unsigned char y)     //OLED显示一个点
  263          {
  264   1          ShowBUFF[y/8][x] |= 1<<(y%8);
  265   1      }
  266          
  267          //========================================================================
  268          // 函数名称: OLED_BuffShowPoint
  269          // 函数功能: OLED显示一条线
  270          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  271          // 函数返回: 无
  272          // 当前版本: VER1.0
  273          // 修改日期: 2023 - 6 - 7
  274          // 当前作者: ZCF
  275          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  276          //========================================================================
  277          void OLED_BuffShowLine( unsigned char x1, unsigned char y1, unsigned char x2,unsigned char y2)
  278          {
  279   1          unsigned char x,y;
  280   1          if( x1>x2 )
  281   1          {
  282   2              x=x1;x1=x2;x2=x;
  283   2              y=y1;y1=y2;y2=y;
  284   2          }
  285   1          if(x1!=x2)
  286   1          {
  287   2              for( x = x1; x <= x2; x++ )
  288   2              {
  289   3                  if( y2>y1 )
  290   3                      OLED_BuffShowPoint(x, (unsigned char)(y1+(unsigned int)(y2-y1)*(unsigned int)x/(unsigned 
             -int)(x2-x1)));
  291   3                  else
  292   3                      OLED_BuffShowPoint(x, (unsigned char)(y1-(unsigned int)(y1-y2)*(unsigned int)x/(unsigned 
             -int)(x2-x1)));
  293   3              }        
  294   2          }
  295   1          else
  296   1          {
  297   2              if( y1>y2 )
  298   2              {
  299   3                  for( y = y2; y <= y1; y++ )
  300   3                     OLED_BuffShowPoint(x1, y); 
  301   3              }
  302   2              else
  303   2              {
  304   3                  for( y = y1; y <= y2; y++ )
  305   3                     OLED_BuffShowPoint(x1, y);             
  306   3              }
  307   2          }
  308   1      }
  309          
  310          //========================================================================
  311          // 函数名称: OLED_BuffShowRectangle
  312          // 函数功能: OLED显示一个矩形
  313          // 入口参数: @x1：x起点  @y1：y起点  @x2：x终点   @y2：y终点
  314          // 函数返回: 无
  315          // 当前版本: VER1.0
  316          // 修改日期: 2023 - 6 - 7
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 6   

  317          // 当前作者: ZCF
  318          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  319          //========================================================================
  320          void OLED_BuffShowRectangle(unsigned char x1, unsigned char y1, unsigned char x2, unsigned char y2)
  321          {
  322   1          OLED_BuffShowLine(x1, y1, x2, y1);
  323   1          OLED_BuffShowLine(x1, y1, x1, y2);
  324   1          OLED_BuffShowLine(x1, y2, x2, y2);
  325   1          OLED_BuffShowLine(x2, y1, x2, y2);
  326   1      }
  327          
  328          //========================================================================
  329          // 函数名称: OLED_BuffShowCircle
  330          // 函数功能: OLED显示一个圆形
  331          // 入口参数: @x：x点  @y：y点  @r:半径
  332          // 函数返回: 无
  333          // 当前版本: VER1.0
  334          // 修改日期: 2023 - 6 - 7
  335          // 当前作者: ZCF
  336          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  337          //========================================================================
  338          void OLED_BuffShowCircle(unsigned char x, unsigned char y, unsigned char r)
  339          {
  340   1          int a, b;
  341   1          int di;
  342   1          a = 0;
  343   1          b = r;
  344   1          di = 3 - (r << 1);       //判断下个点位置的标志
  345   1       
  346   1          while (a <= b)
  347   1          {
  348   2              OLED_BuffShowPoint(x + a, y - b);        //5
*** WARNING C188 IN LINE 348 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 348 OF oled.c: 'parameter 2': value truncated
  349   2              OLED_BuffShowPoint(x + b, y - a);        //0
*** WARNING C188 IN LINE 349 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 349 OF oled.c: 'parameter 2': value truncated
  350   2              OLED_BuffShowPoint(x + b, y + a);        //4
*** WARNING C188 IN LINE 350 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 350 OF oled.c: 'parameter 2': value truncated
  351   2              OLED_BuffShowPoint(x + a, y + b);        //6
*** WARNING C188 IN LINE 351 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 351 OF oled.c: 'parameter 2': value truncated
  352   2              OLED_BuffShowPoint(x - a, y + b);        //1
*** WARNING C188 IN LINE 352 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 352 OF oled.c: 'parameter 2': value truncated
  353   2              OLED_BuffShowPoint(x - b, y + a);
*** WARNING C188 IN LINE 353 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 353 OF oled.c: 'parameter 2': value truncated
  354   2              OLED_BuffShowPoint(x - a, y - b);        //2
*** WARNING C188 IN LINE 354 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 354 OF oled.c: 'parameter 2': value truncated
  355   2              OLED_BuffShowPoint(x - b, y - a);        //7
*** WARNING C188 IN LINE 355 OF oled.c: 'parameter 1': value truncated
*** WARNING C188 IN LINE 355 OF oled.c: 'parameter 2': value truncated
  356   2              a++;
  357   2       
  358   2              //使用Bresenham算法画圆
  359   2              if (di < 0)di += 4 * a + 6;
  360   2              else
  361   2              {
  362   3                  di += 10 + 4 * (a - b);
  363   3                  b--;
  364   3              }
  365   2          }
  366   1      }
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 7   

  367          
  368          //========================================================================
  369          // 函数名称: OLED_BuffShowChar
  370          // 函数功能: OLED显示一个8*16的字符
  371          // 入口参数: @x：x点  @y：y点  @asc:字符   @mode：0正显  1反显
  372          // 函数返回: 无
  373          // 当前版本: VER1.0
  374          // 修改日期: 2023 - 6 - 7
  375          // 当前作者: ZCF
  376          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  377          //========================================================================
  378          void OLED_BuffShowChar(unsigned char x,unsigned char y,char asc, unsigned char mode)     //OLED显示一个8*
             -16字符
  379          {
  380   1          unsigned char j,k;
  381   1          for( j=0;j<2;j++ )
  382   1          {
  383   2              for( k=0;k<8;k++ )
  384   2              {
  385   3                  if(mode==0)            
  386   3                      ShowBUFF[j+y][x+k]=Ascll_16[(asc-' ')*2][j*8+k];
  387   3                  else
  388   3                      ShowBUFF[j+y][x+k]=~Ascll_16[(asc-' ')*2][j*8+k];
  389   3              }
  390   2          }    
  391   1      }
  392          
  393          //========================================================================
  394          // 函数名称: OLED_BuffShowGBK
  395          // 函数功能: OLED显示汉字
  396          // 入口参数: @x：x点  @y：y点  @gbk:汉字   @mode：0正显  1反显
  397          // 函数返回: 无
  398          // 当前版本: VER1.0
  399          // 修改日期: 2023 - 6 - 7
  400          // 当前作者: ZCF
  401          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  402          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  403          //========================================================================
  404          void OLED_BuffShowGBK(unsigned char x,unsigned char y,char *gbk,unsigned char mode)     //OLED显示一个16*
             -16汉字
  405          {
  406   1          unsigned char i;
  407   1          unsigned char j,k;
  408   1          for( i=0;i<200;i++ )
  409   1          {
  410   2              if(( gbk[0]== GBK16[i].gbn_bum[0] )&&( gbk[1]== GBK16[i].gbn_bum[1] ))
  411   2              {
  412   3                  for( j=0;j<2;j++ )
  413   3                  {
  414   4                      for( k=0;k<16;k++ )
  415   4                      {
  416   5                          if( mode ==0 )
  417   5                              ShowBUFF[j+y][x+k]=GBK16[i].gbk_font[j*16+k];
  418   5                          else
  419   5                              ShowBUFF[j+y][x+k]=~GBK16[i].gbk_font[j*16+k];
  420   5                      }
  421   4                  }
  422   3                  break;
  423   3              }
  424   2          }    
  425   1      }
  426          
  427          //========================================================================
  428          // 函数名称: OLED_BuffShowString
  429          // 函数功能: OLED显示字符串。汉字字符均可
  430          // 入口参数: @x：x点  @y：y点  @s字符串   @mode：0正显  1反显
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 8   

  431          // 函数返回: 无
  432          // 当前版本: VER1.0
  433          // 修改日期: 2023 - 6 - 7
  434          // 当前作者: ZCF
  435          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  436          //          用到的汉字需要自己取模放到字库里，字库多的话，这里这个循环变量要放大
  437          //========================================================================
  438          void OLED_BuffShowString(unsigned char x,unsigned char y,char *s,unsigned char mode)
  439          {
  440   1          char s_num[2];
  441   1        while(*s != '\0')       //字符串不为空，循环
  442   1        {
  443   2              if ((unsigned char)*s < 0x80)     //根据输入数据的大小判断是字符还是汉字，
  444   2              {
  445   3                  OLED_BuffShowChar(x,y,*s,mode);
  446   3                  x+=8;
  447   3                  s++;
  448   3              }
  449   2              else
  450   2              {
  451   3                  s_num[0] = *s ;
  452   3                  s_num[1] = *(s+1) ;
  453   3                  OLED_BuffShowGBK(x,y,s_num,mode);
  454   3                  x+=16;
  455   3                  s+=2;
  456   3              }
  457   2          if(x>127)
  458   2              {
  459   3                  x=0;
  460   3                  y+=2;
  461   3              }
  462   2        }       
  463   1      }
  464          
  465          //========================================================================
  466          // 函数名称: OLED_BuffShowNum
  467          // 函数功能: OLED显示整形变量
  468          // 入口参数: @x：x点  @y：y点  @num：整形变量   @mode：0正显  1反显
  469          // 函数返回: 无
  470          // 当前版本: VER1.0
  471          // 修改日期: 2023 - 6 - 7
  472          // 当前作者: ZCF
  473          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  474          //========================================================================
  475          void OLED_BuffShowNum(unsigned char x,unsigned char y,long num,unsigned char mode)
  476          {
  477   1          unsigned char xdata str[10];
  478   1          memset(str,0,10);
  479   1          sprintf(str,"%ld",num);
  480   1          OLED_BuffShowString(x,y,(unsigned char*)str);
*** WARNING C96 IN LINE 480 OF oled.c: 'OLED_BuffShowString': too few actual parameters
  481   1      }
*** WARNING C47 IN LINE 475 OF oled.c: 'mode': unreferenced parameter
  482          
  483          //========================================================================
  484          // 函数名称: OLED_BuffShowNum02F
  485          // 函数功能: OLED显示一个两位小数变量
  486          // 入口参数: @x：x点  @y：y点  @num：小数变量   @mode：0正显  1反显
  487          // 函数返回: 无
  488          // 当前版本: VER1.0
  489          // 修改日期: 2023 - 6 - 7
  490          // 当前作者: ZCF
  491          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  492          //========================================================================
  493          void OLED_BuffShowNum02F(unsigned char x,unsigned char y,float num,unsigned char mode)
  494          {
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 9   

  495   1          unsigned char xdata str[10];
  496   1          memset(str,0,10);
  497   1          sprintf(str,"%.2f",num);
  498   1          OLED_BuffShowString(x,y,(unsigned char*)str,mode);
  499   1      }
  500          
  501          
  502          //========================================================================
  503          // 函数名称: OLED_BuffShowChar32
  504          // 函数功能: OLED显示16*32的字符
  505          // 入口参数: @x：x点  @y：y点  @num：显示第几个字符   @mode：0正显  1反显
  506          // 函数返回: 无
  507          // 当前版本: VER1.0
  508          // 修改日期: 2023 - 6 - 7
  509          // 当前作者: ZCF
  510          // 其他备注: 写入的是缓存，需要电调用OLED_BuffShow才能显示出来
  511          //          用到的需要自己取模哦
  512          //========================================================================
  513          void OLED_BuffShowChar32(unsigned char  x,unsigned char  y,unsigned char num, unsigned char mode)     
  514          {
  515   1          unsigned char j,k;
  516   1          for( j=0;j<4;j++ )
  517   1          {
  518   2              for( k=0;k<16;k++ )
  519   2              {
  520   3                  if( mode==0 )
  521   3                      ShowBUFF[j+y][x+k]=lib_num1632[num][j*16+k];
  522   3                  else
  523   3                      ShowBUFF[j+y][x+k]=~lib_num1632[num][j*16+k];
  524   3              }
  525   2          }            
  526   1      }
  527          
  528          
  529          //========================================================================
  530          // 函数名称: OLED_BuffShowBMP
  531          // 函数功能: OLED缓存写入图片
  532          // 入口参数: @x0:x起点  @y0:y起点    @x1:x终点   @y1:y终点  @BMP：显示数组
  533          // 函数返回: 无
  534          // 当前版本: VER1.0
  535          // 修改日期: 2023 - 6 - 7
  536          // 当前作者: ZCF
  537          // 其他备注:
  538          //========================================================================
  539          void OLED_BuffShowBMP(unsigned char x0, unsigned char y0,unsigned char x1, unsigned char y1,unsigned char
             - BMP[])
  540          {   
  541   1          unsigned int xdata num=0;
  542   1          unsigned char k,j;
  543   1          
  544   1          for( j=0;j<y1;j++ )
  545   1          {
  546   2              for( k=0;k<x1;k++ )
  547   2              {
  548   3                  ShowBUFF[j+y0][x0+k]=BMP[num++];
  549   3              }
  550   2          }  
  551   1      } 
  552           


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      5226     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
C251 COMPILER V5.60.0,  oled                                                               27/03/24  18:48:19  PAGE 10  

  pdata size           =    ------     ------
  xdata size           =      1024         23
  xdata-const size     =    ------     ------
  edata size           =    ------         23
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         9     ------
End of Module Information.


C251 COMPILATION COMPLETE.  19 WARNING(S),  0 ERROR(S)
