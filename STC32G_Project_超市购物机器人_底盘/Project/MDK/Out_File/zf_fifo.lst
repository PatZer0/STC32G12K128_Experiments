C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_fifo
OBJECT MODULE PLACED IN .\Out_File\zf_fifo.obj
COMPILER INVOKED BY: C:\Keil_v5\C251\BIN\C251.EXE ..\..\Libraries\seekfree_libraries\zf_fifo.c XSMALL INTR2 WARNINGLEVEL
                    -(3) OPTIMIZE(0,SPEED) BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfre
                    -e_peripheral;..\CODE;..\USER\inc;..\USER\src;..\..\Libraries\seekfree_components) DEBUG PRINT(.\Out_File\zf_fifo.lst) TA
                    -BS(2) OBJECT(.\Out_File\zf_fifo.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2           * COPYRIGHT NOTICE
    3           * Copyright (c) 2020,Öð·É¿Æ¼¼
    4           * All rights reserved.
    5           * ¼¼ÊõÌÖÂÛQQÈº£ºÒ»Èº£º179029047(ÒÑÂú)  ¶þÈº£º244861897(ÒÑÂú)  ÈýÈº£º824575535
    6           *
    7           * ÒÔÏÂËùÓÐÄÚÈÝ°æÈ¨¾ùÊôÖð·É¿Æ¼¼ËùÓÐ£¬Î´¾­ÔÊÐí²»µÃÓÃÓÚÉÌÒµÓÃÍ¾£¬
    8           * »¶Ó­¸÷Î»Ê¹ÓÃ²¢´«²¥±¾³ÌÐò£¬ÐÞ¸ÄÄÚÈÝÊ±±ØÐë±£ÁôÖð·É¿Æ¼¼µÄ°æÈ¨ÉùÃ÷¡£
    9           *
   10           * @file          fifo
   11           * @company       ³É¶¼Öð·É¿Æ¼¼ÓÐÏÞ¹«Ë¾
   12           * @author        Öð·É¿Æ¼¼(QQ790875685)
   13           * @version       ²é¿´docÄÚversionÎÄ¼þ °æ±¾ËµÃ÷
   14           * @Software    MDK FOR C251 V5.60
   15           * @Target core   STC32F12K
   16           * @Taobao      https://seekfree.taobao.com/
   17           * @date          2020-4-14
   18           ********************************************************************************************************
             -************/
   19          
   20          
   21          
   22          #include "stdio.h"
   23          #include "string.h"
   24          #include "board.h"
   25          #include "zf_gpio.h"
   26          #include "zf_uart.h"
   27          #include "zf_nvic.h"
   28          #include "zf_delay.h"
   29          #include "zf_fifo.h"
   30          
   31          
   32          
   33          
   34          //-------------------------------------------------------------------------------------------------------
             -------------
   35          // º¯Êý¼ò½é     FIFO Í·Ö¸ÕëÎ»ÒÆ
   36          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
   37          // ²ÎÊýËµÃ÷     offset              Æ«ÒÆÁ¿
   38          // ·µ»Ø²ÎÊý     void
   39          // Ê¹ÓÃÊ¾Àý     fifo_head_offset(fifo, 1);
   40          // ±¸×¢ÐÅÏ¢     ±¾º¯ÊýÔÚÎÄ¼þÄÚ²¿µ÷ÓÃ ÓÃ»§²»ÓÃ¹Ø×¢ Ò²²»¿ÉÐÞ¸Ä
   41          //-------------------------------------------------------------------------------------------------------
             -------------
   42          static void fifo_head_offset (fifo_struct *fifo, uint32 offset)
   43          {
   44   1          fifo->head += offset;
   45   1          
   46   1          while(fifo->max <= fifo->head)                                              // Èç¹û·¶Î§³¬¹ýÔò¼õ»º³åÇø
             -´óÐ¡ Ö±µ½Ð¡ÓÚ×î´ó»º³åÇø´óÐ¡
   47   1          {
   48   2              fifo->head -= fifo->max;
   49   2          }
   50   1      }
   51          
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 2   

   52          //-------------------------------------------------------------------------------------------------------
             -------------
   53          // º¯Êý¼ò½é     FIFO Î²Ö¸ÕëÎ»ÒÆ
   54          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
   55          // ²ÎÊýËµÃ÷     offset              Æ«ÒÆÁ¿
   56          // ·µ»Ø²ÎÊý     void
   57          // Ê¹ÓÃÊ¾Àý     fifo_end_offset(fifo, 1);
   58          // ±¸×¢ÐÅÏ¢     ±¾º¯ÊýÔÚÎÄ¼þÄÚ²¿µ÷ÓÃ ÓÃ»§²»ÓÃ¹Ø×¢ Ò²²»¿ÉÐÞ¸Ä
   59          //-------------------------------------------------------------------------------------------------------
             -------------
   60          static void fifo_end_offset (fifo_struct *fifo, uint32 offset)
   61          {
   62   1          fifo->end += offset;
   63   1          
   64   1          while(fifo->max <= fifo->end)                                               // Èç¹û·¶Î§³¬¹ýÔò¼õ»º³åÇø
             -´óÐ¡ Ö±µ½Ð¡ÓÚ×î´ó»º³åÇø´óÐ¡
   65   1          {
   66   2              fifo->end -= fifo->max;
   67   2          }
   68   1      }
   69          
   70          //-------------------------------------------------------------------------------------------------------
             -------------
   71          // º¯Êý¼ò½é     FIFO ÖØÖÃ»º³åÆ÷
   72          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
   73          // ·µ»Ø²ÎÊý     void
   74          // Ê¹ÓÃÊ¾Àý     fifo_clear(fifo);
   75          // ±¸×¢ÐÅÏ¢     Çå¿Õµ±Ç° FIFO ¶ÔÏóµÄÄÚ´æ
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          fifo_state_enum fifo_clear (fifo_struct *fifo)
   78          {
   79   1          //zf_assert(NULL != fifo);
   80   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
   81   1          do
   82   1          {
   83   2      //        if(FIFO_IDLE != fifo->execution)                                        // ÅÐ¶ÏÊÇ·ñµ±Ç° FIFO ÊÇ
             -·ñ¿ÕÏÐ
   84   2      //        {
   85   2      //            return_state = FIFO_RESET_UNDO;                                     // ÖØÖÃ²Ù×÷Î´Íê³É
   86   2      //            break;
   87   2      //        }
   88   2              fifo->execution |= FIFO_RESET;                                          // ÖØÖÃ²Ù×÷ÖÃÎ»
   89   2              fifo->head      = 0;                                                    // ÖØÖÃ FIFO ËùÓÐÊýÖµ¸´Î»
   90   2              fifo->end       = 0;                                                    // ÖØÖÃ FIFO ËùÓÐÊýÖµ¸´Î»
   91   2              fifo->reamin_size      = fifo->max;                                            // ÖØÖÃ FIFO ËùÓÐÊ
             -ýÖµ¸´Î»
   92   2              switch(fifo->type)
   93   2              {
   94   3                  case FIFO_DATA_8BIT:    memset(fifo->buffer, 0, (uint16)fifo->max);     break;
   95   3                  case FIFO_DATA_16BIT:   memset(fifo->buffer, 0, (uint16)fifo->max * 2); break;
   96   3                  case FIFO_DATA_32BIT:   memset(fifo->buffer, 0, (uint16)fifo->max * 4); break;
   97   3              }
   98   2              fifo->execution = FIFO_IDLE;                                            // ²Ù×÷×´Ì¬¸´Î»
   99   2          }while(0);
  100   1          return return_state;
  101   1      }
  102          
  103          //-------------------------------------------------------------------------------------------------------
             -------------
  104          // º¯Êý¼ò½é     FIFO ²éÑ¯µ±Ç°Êý¾Ý¸öÊý
  105          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  106          // ·µ»Ø²ÎÊý     uint32              ÒÑÊ¹ÓÃ³¤¶È
  107          // Ê¹ÓÃÊ¾Àý     uint32 len = fifo_used(fifo);
  108          // ±¸×¢ÐÅÏ¢
  109          //-------------------------------------------------------------------------------------------------------
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 3   

             -------------
  110          uint32 fifo_used (fifo_struct *fifo)
  111          {
  112   1          //zf_assert(fifo != NULL);
  113   1          return (fifo->max - fifo->reamin_size);                                            // ·µ»Øµ±Ç° FIFO »
             -º³åÇøÖÐÊý¾Ý¸öÊý
  114   1      }
  115          
  116          //-------------------------------------------------------------------------------------------------------
             -------------
  117          // º¯Êý¼ò½é     Ïò FIFO ÖÐÐ´ÈëÊý¾Ý
  118          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  119          // ²ÎÊýËµÃ÷     dat                 Êý¾Ý
  120          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  121          // Ê¹ÓÃÊ¾Àý     zf_log(fifo_write_element(&fifo, data) == FIFO_SUCCESS, "fifo_write_byte error");
  122          // ±¸×¢ÐÅÏ¢
  123          //-------------------------------------------------------------------------------------------------------
             -------------
  124          fifo_state_enum fifo_write_element (fifo_struct *fifo, uint32 dat)
  125          {
  126   1          //zf_assert(NULL != fifo);
  127   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
  128   1      
  129   1          do
  130   1          {
  131   2              if((FIFO_RESET | FIFO_WRITE) & fifo->execution)                         // ²»ÔÚÐ´ÈëÓëÖØÖÃ×´Ì¬ ±ÜÃ
             -âÐ´Èë¾ºÕùÓëÖ¸Ïò´íÎó
  132   2              {
  133   3                  return_state = FIFO_WRITE_UNDO;                                     // Ð´Èë²Ù×÷Î´Íê³É
  134   3                  break;
  135   3              }
  136   2              fifo->execution |= FIFO_WRITE;                                          // Ð´Èë²Ù×÷ÖÃÎ»
  137   2      
  138   2              if(1 <= fifo->reamin_size)                                                     // Ê£Óà¿Õ¼ä×ã¹»×°Ï
             -Â±¾´ÎÊý¾Ý
  139   2              {
  140   3                  switch(fifo->type)
  141   3                  {
  142   4                      case FIFO_DATA_8BIT:    ((uint8 *)fifo->buffer)[fifo->head]  = dat;  break;
  143   4                      case FIFO_DATA_16BIT:   ((uint16 *)fifo->buffer)[fifo->head] = dat; break;
  144   4                      case FIFO_DATA_32BIT:   ((uint32 *)fifo->buffer)[fifo->head] = dat; break;
  145   4                  }
  146   3                  fifo_head_offset(fifo, 1);                                          // Í·Ö¸ÕëÆ«ÒÆ
  147   3                  fifo->reamin_size -= 1;                                                    // »º³åÇøÊ£Óà³¤¶È¼
             -õÐ¡
  148   3              }
  149   2              else
  150   2              {
  151   3                  return_state = FIFO_SPACE_NO_ENOUGH;                                // µ±Ç° FIFO »º³åÇøÂú ²»Ä
             -ÜÔÙÐ´ÈëÊý¾Ý ·µ»Ø¿Õ¼ä²»×ã
  152   3              }
  153   2              fifo->execution &= ~FIFO_WRITE;                                         // Ð´Èë²Ù×÷¸´Î»
  154   2          }while(0);
  155   1      
  156   1          return return_state;
  157   1      }
  158          
  159          //-------------------------------------------------------------------------------------------------------
             -------------
  160          // º¯Êý¼ò½é     Ïò FIFO ÖÐÐ´ÈëÊý¾Ý
  161          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  162          // ²ÎÊýËµÃ÷     *dat                Êý¾ÝÀ´Ô´»º³åÇøÖ¸Õë
  163          // ²ÎÊýËµÃ÷     length              ÐèÒªÐ´ÈëµÄÊý¾Ý³¤¶È
  164          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  165          // Ê¹ÓÃÊ¾Àý     zf_log(fifo_write_buffer(&fifo, data, 32) == FIFO_SUCCESS, "fifo_write_buffer error");
  166          // ±¸×¢ÐÅÏ¢
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 4   

  167          //-------------------------------------------------------------------------------------------------------
             -------------
  168          fifo_state_enum fifo_write_buffer (fifo_struct *fifo, void *dat, uint32 length)
  169          {
  170   1          //zf_assert(NULL != fifo);
  171   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
  172   1          uint32 temp_length = 0;
  173   1          
  174   1          do
  175   1          {
  176   2              if(NULL == dat)
  177   2              {
  178   3                  return_state = FIFO_BUFFER_NULL;                                    // ÓÃ»§»º³åÇøÒì³£
  179   3                  break;
  180   3              }
  181   2              if((FIFO_RESET | FIFO_WRITE) & fifo->execution)                         // ²»ÔÚÐ´ÈëÓëÖØÖÃ×´Ì¬ ±ÜÃ
             -âÐ´Èë¾ºÕùÓëÖ¸Ïò´íÎó
  182   2              {
  183   3                  return_state = FIFO_WRITE_UNDO;                                     // Ð´Èë²Ù×÷Î´Íê³É
  184   3                  break;
  185   3              }
  186   2              fifo->execution |= FIFO_WRITE;                                          // Ð´Èë²Ù×÷ÖÃÎ»
  187   2      
  188   2              if(length <= fifo->reamin_size)                                                // Ê£Óà¿Õ¼ä×ã¹»×°Ï
             -Â±¾´ÎÊý¾Ý
  189   2              {
  190   3                  temp_length = fifo->max - fifo->head;                               // ¼ÆËãÍ·Ö¸Õë¾àÀë»º³åÇøÎ²
             -»¹ÓÐ¶àÉÙ¿Õ¼ä
  191   3      
  192   3                  if(length > temp_length)                                            // ¾àÀë»º³åÇøÎ²³¤¶È²»×ãÐ´
             -ÈëÊý¾Ý »·ÐÎ»º³åÇø·Ö¶Î²Ù×÷
  193   3                  {
  194   4                      switch(fifo->type)
  195   4                      {
  196   5                          case FIFO_DATA_8BIT:
  197   5                          {
  198   6                              memcpy(
  199   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  200   6                                  dat, (uint16)temp_length);                                  // ¿½±´µÚÒ»¶ÎÊý¾Ý
  201   6                              fifo_head_offset(fifo, temp_length);                    // Í·Ö¸ÕëÆ«ÒÆ
  202   6                              memcpy(
  203   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  204   6                                  &(((uint8 *)dat)[temp_length]),
  205   6                                  (uint16)(length - temp_length));                              // ¿½±´µÚ¶þ¶ÎÊý
             -¾Ý
  206   6                              fifo_head_offset(fifo, length - temp_length);           // Í·Ö¸ÕëÆ«ÒÆ
  207   6                          }break;
  208   5                          case FIFO_DATA_16BIT:
  209   5                          {
  210   6                              memcpy(
  211   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  212   6                                  dat, temp_length * 2);                              // ¿½±´µÚÒ»¶ÎÊý¾Ý
  213   6                              fifo_head_offset(fifo, temp_length);                    // Í·Ö¸ÕëÆ«ÒÆ
  214   6                              memcpy(
  215   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  216   6                                  &(((uint16 *)dat)[temp_length]),
  217   6                                  (length - temp_length) * 2);                        // ¿½±´µÚ¶þ¶ÎÊý¾Ý
  218   6                              fifo_head_offset(fifo, length - temp_length);           // Í·Ö¸ÕëÆ«ÒÆ
  219   6                          }break;
  220   5                          case FIFO_DATA_32BIT:
  221   5                          {
  222   6                              memcpy(
  223   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  224   6                                  dat, temp_length * 4);                              // ¿½±´µÚÒ»¶ÎÊý¾Ý
  225   6                              fifo_head_offset(fifo, temp_length);                    // Í·Ö¸ÕëÆ«ÒÆ
  226   6                              memcpy(
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 5   

  227   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  228   6                                  &(((uint32 *)dat)[temp_length]),
  229   6                                  (length - temp_length) * 4);                        // ¿½±´µÚ¶þ¶ÎÊý¾Ý
  230   6                              fifo_head_offset(fifo, length - temp_length);           // Í·Ö¸ÕëÆ«ÒÆ
  231   6                          }break;
  232   5                      }
  233   4                  }
  234   3                  else
  235   3                  {
  236   4                      switch(fifo->type)
  237   4                      {
  238   5                          case FIFO_DATA_8BIT:
  239   5                          {
  240   6                              memcpy(
  241   6                                  &(((uint8 *)fifo->buffer)[fifo->head]),
  242   6                                  dat, (uint16)length);                                       // Ò»´ÎÍêÕûÐ´Èë
  243   6                              fifo_head_offset(fifo, length);                         // Í·Ö¸ÕëÆ«ÒÆ
  244   6                          }break;
  245   5                          case FIFO_DATA_16BIT:
  246   5                          {
  247   6                              memcpy(
  248   6                                  &(((uint16 *)fifo->buffer)[fifo->head]),
  249   6                                  dat, length * 2);                                   // Ò»´ÎÍêÕûÐ´Èë
  250   6                              fifo_head_offset(fifo, length);                         // Í·Ö¸ÕëÆ«ÒÆ
  251   6                          }break;
  252   5                          case FIFO_DATA_32BIT:
  253   5                          {
  254   6                              memcpy(
  255   6                                  &(((uint32 *)fifo->buffer)[fifo->head]),
  256   6                                  dat, length * 4);                                   // Ò»´ÎÍêÕûÐ´Èë
  257   6                              fifo_head_offset(fifo, length);                         // Í·Ö¸ÕëÆ«ÒÆ
  258   6                          }break;
  259   5                      }
  260   4                  }
  261   3      
  262   3                  fifo->reamin_size -= length;                                               // »º³åÇøÊ£Óà³¤¶È¼
             -õÐ¡
  263   3              }
  264   2              else
  265   2              {
  266   3                  return_state = FIFO_SPACE_NO_ENOUGH;                                // µ±Ç° FIFO »º³åÇøÂú ²»Ä
             -ÜÔÙÐ´ÈëÊý¾Ý ·µ»Ø¿Õ¼ä²»×ã
  267   3              }
  268   2              fifo->execution &= ~FIFO_WRITE;                                         // Ð´Èë²Ù×÷¸´Î»
  269   2          }while(0);
  270   1      
  271   1          return return_state;
  272   1      }
  273          
  274          //-------------------------------------------------------------------------------------------------------
             -------------
  275          // º¯Êý¼ò½é     ´Ó FIFO ¶ÁÈ¡Êý¾Ý
  276          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  277          // ²ÎÊýËµÃ÷     *dat                Ä¿±ê»º³åÇøÖ¸Õë
  278          // ²ÎÊýËµÃ÷     flag                ÊÇ·ñ±ä¸ü FIFO ×´Ì¬ ¿ÉÑ¡ÔñÊÇ·ñÇå¿Õ¶ÁÈ¡µÄÊý¾Ý
  279          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  280          // Ê¹ÓÃÊ¾Àý     zf_log(fifo_read_element(&fifo, data, FIFO_READ_ONLY) == FIFO_SUCCESS, "fifo_read_byte er
             -ror");
  281          // ±¸×¢ÐÅÏ¢
  282          //-------------------------------------------------------------------------------------------------------
             -------------
  283          fifo_state_enum fifo_read_element (fifo_struct *fifo, void *dat, fifo_operation_enum flag)
  284          {
  285   1          //zf_assert(NULL != fifo);
  286   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
  287   1      
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 6   

  288   1          do
  289   1          {
  290   2              if(NULL == dat)
  291   2              {
  292   3                  return_state = FIFO_BUFFER_NULL;                                    // ÓÃ»§»º³åÇøÒì³£
  293   3              }
  294   2              else
  295   2              {
  296   3                  if((FIFO_RESET | FIFO_CLEAR) & fifo->execution)                     // ÅÐ¶ÏÊÇ·ñµ±Ç° FIFO ÊÇ·ñ
             -ÔÚÖ´ÐÐÇå¿Õ»òÖØÖÃ²Ù×÷
  297   3                  {
  298   4                      return_state = FIFO_READ_UNDO;                                  // ¶ÁÈ¡²Ù×÷Î´Íê³É
  299   4                      break;
  300   4                  }
  301   3      
  302   3                  if(1 > fifo_used(fifo))
  303   3                  {
  304   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // »º³åÇøÃ»ÓÐÊý¾Ý ·µ»ØÊý¾
             -Ý³¤¶È²»×ã
  305   4                      break;                                                          // Ö±½ÓÍË³ö²Ù×÷
  306   4                  }
  307   3      
  308   3                  fifo->execution |= FIFO_READ;                                       // ¶Á²Ù×÷ÖÃÎ»
  309   3                  switch(fifo->type)
  310   3                  {
  311   4                      case FIFO_DATA_8BIT:    *((uint8 *)dat) = ((uint8 *)fifo->buffer)[fifo->end];   break;
  312   4                      case FIFO_DATA_16BIT:   *((uint16 *)dat) = ((uint16 *)fifo->buffer)[fifo->end]; break;
  313   4                      case FIFO_DATA_32BIT:   *((uint32 *)dat) = ((uint32 *)fifo->buffer)[fifo->end]; break;
  314   4                  }
  315   3                  fifo->execution &= ~FIFO_READ;                                      // ¶Á²Ù×÷¸´Î»
  316   3              }
  317   2      
  318   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Èç¹ûÑ¡Ôñ¶ÁÈ¡²¢¸ü¸Ä FIF
             -O ×´Ì¬
  319   2              {
  320   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ²»ÔÚ ÖØÖÃ Çå¿Õ ¶ÁÈ¡ ×´
             -Ì¬ ±ÜÃâÒì³£
  321   3                  {
  322   4                      return_state = FIFO_CLEAR_UNDO;                                 // Çå¿Õ²Ù×÷Î´Íê³É
  323   4                      break;
  324   4                  }
  325   3                  fifo->execution |= FIFO_CLEAR;                                      // Çå¿Õ×÷ÖÃÎ»
  326   3                  fifo_end_offset(fifo, 1);                                           // ÒÆ¶¯ FIFO Í·Ö¸Õë
  327   3                  fifo->reamin_size += 1;                                                    // ÊÍ·Å¶ÔÓ¦³¤¶È¿Õ¼
             -ä
  328   3                  fifo->execution &= ~FIFO_CLEAR;                                     // Çå¿Õ×÷¸´Î»
  329   3              }
  330   2          }while(0);
  331   1      
  332   1          return return_state;
  333   1      }
  334          
  335          //-------------------------------------------------------------------------------------------------------
             -------------
  336          // º¯Êý¼ò½é     ´Ó FIFO ¶ÁÈ¡Êý¾Ý
  337          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  338          // ²ÎÊýËµÃ÷     *dat                Ä¿±ê»º³åÇøÖ¸Õë
  339          // ²ÎÊýËµÃ÷     *length             ¶ÁÈ¡µÄÊý¾Ý³¤¶È Èç¹ûÃ»ÓÐÕâÃ´¶àÊý¾ÝÕâÀï»á±»ÐÞ¸Ä
  340          // ²ÎÊýËµÃ÷     flag                ÊÇ·ñ±ä¸ü FIFO ×´Ì¬ ¿ÉÑ¡ÔñÊÇ·ñÇå¿Õ¶ÁÈ¡µÄÊý¾Ý
  341          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  342          // Ê¹ÓÃÊ¾Àý     zf_log(fifo_read_buffer(&fifo, data, &length, FIFO_READ_ONLY) == FIFO_SUCCESS, "fifo_read
             -_buffer error");
  343          // ±¸×¢ÐÅÏ¢
  344          //-------------------------------------------------------------------------------------------------------
             -------------
  345          fifo_state_enum fifo_read_buffer (fifo_struct *fifo, void *dat, uint32 *length, fifo_operation_enum flag)
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 7   

  346          {
  347   1          //zf_assert(NULL != fifo);
  348   1          //zf_assert(NULL != length);
  349   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
  350   1          uint32 temp_length = 0;
  351   1          uint32 fifo_data_length = 0;
  352   1      
  353   1          do
  354   1          {
  355   2              if(NULL == dat)
  356   2              {
  357   3                  return_state = FIFO_BUFFER_NULL;
  358   3              }
  359   2              else
  360   2              {
  361   3                  if((FIFO_RESET | FIFO_CLEAR) & fifo->execution)                     // ÅÐ¶ÏÊÇ·ñµ±Ç° FIFO ÊÇ·ñ
             -ÔÚÖ´ÐÐÇå¿Õ»òÖØÖÃ²Ù×÷
  362   3                  {
  363   4                      *length = fifo_data_length;                                     // ¾ÀÕý¶ÁÈ¡µÄ³¤¶È
  364   4                      return_state = FIFO_READ_UNDO;                                  // ¶ÁÈ¡²Ù×÷Î´Íê³É
  365   4                      break;
  366   4                  }
  367   3      
  368   3                  fifo_data_length = fifo_used(fifo);                                 // »ñÈ¡µ±Ç°Êý¾ÝÓÐ¶àÉÙ
  369   3                  if(*length > fifo_data_length)                                      // ÅÐ¶Ï³¤¶ÈÊÇ·ñ×ã¹»
  370   3                  {
  371   4                      *length = fifo_data_length;                                     // ¾ÀÕý¶ÁÈ¡µÄ³¤¶È
  372   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // ±êÖ¾Êý¾Ý²»¹»
  373   4                      if(0 == fifo_data_length)                                       // Èç¹ûÃ»ÓÐÊý¾Ý ¾ÍÖ±½ÓÍË³
             -ö
  374   4                      {
  375   5                          fifo->execution &= ~FIFO_READ;                              // ¶Á²Ù×÷¸´Î»
  376   5                          break;
  377   5                      }
  378   4                  }
  379   3      
  380   3                  fifo->execution |= FIFO_READ;                                       // ¶Á²Ù×÷ÖÃÎ»
  381   3                  temp_length = fifo->max - fifo->end;                                // ¼ÆËãÎ²Ö¸Õë¾àÀë»º³åÇøÎ²
             -»¹ÓÐ¶àÉÙ¿Õ¼ä
  382   3                  if(*length <= temp_length)                                          // ×ã¹»Ò»´ÎÐÔ¶ÁÈ¡Íê±Ï
  383   3                  {
  384   4                      switch(fifo->type)
  385   4                      {
  386   5                          case FIFO_DATA_8BIT:    memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->end]),  (uint16)*
             -length);        break;
  387   5                          case FIFO_DATA_16BIT:   memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->end]), (uint16)*
             -length * 2);   break;
  388   5                          case FIFO_DATA_32BIT:   memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->end]), (uint16)*
             -length * 4);   break;
  389   5                      }
  390   4                  }
  391   3                  else
  392   3                  {
  393   4                      switch(fifo->type)
  394   4                      {
  395   5                          case FIFO_DATA_8BIT:
  396   5                          {
  397   6                              memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->end]), (uint16)temp_length);
  398   6                              memcpy(&(((uint8 *)dat)[temp_length]), fifo->buffer, (uint16)(*length - temp_leng
             -th));
  399   6                          }break;
  400   5                          case FIFO_DATA_16BIT:
  401   5                          {
  402   6                              memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->end]), (uint16)(temp_length * 2));
  403   6                              memcpy(&(((uint16 *)dat)[temp_length]), fifo->buffer, (uint16)((*length - temp_le
             -ngth) * 2));
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 8   

  404   6                          }break;
  405   5                          case FIFO_DATA_32BIT:
  406   5                          {
  407   6                              memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->end]), (uint16)(temp_length * 4));
  408   6                              memcpy(&(((uint32 *)dat)[temp_length]), fifo->buffer, (uint16)((*length - temp_le
             -ngth) * 4));
  409   6                          }break;
  410   5                      }
  411   4                  }
  412   3                  fifo->execution &= ~FIFO_READ;                                      // ¶Á²Ù×÷¸´Î»
  413   3              }
  414   2      
  415   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Èç¹ûÑ¡Ôñ¶ÁÈ¡²¢¸ü¸Ä FIF
             -O ×´Ì¬
  416   2              {
  417   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ²»ÔÚ ÖØÖÃ Çå¿Õ ¶ÁÈ¡ ×´
             -Ì¬ ±ÜÃâÒì³£
  418   3                  {
  419   4                      return_state = FIFO_CLEAR_UNDO;                                 // Çå¿Õ²Ù×÷Î´Íê³É
  420   4                      break;
  421   4                  }
  422   3                  fifo->execution |= FIFO_CLEAR;                                      // Çå¿Õ×÷ÖÃÎ»
  423   3                  fifo_end_offset(fifo, *length);                                     // ÒÆ¶¯ FIFO Í·Ö¸Õë
  424   3                  fifo->reamin_size += *length;                                              // ÊÍ·Å¶ÔÓ¦³¤¶È¿Õ¼
             -ä
  425   3                  fifo->execution &= ~FIFO_CLEAR;                                     // Çå¿Õ×÷¸´Î»
  426   3              }
  427   2          }while(0);
  428   1      
  429   1          return return_state;
  430   1      }
  431          
  432          //-------------------------------------------------------------------------------------------------------
             -------------
  433          // º¯Êý¼ò½é     ´Ó FIFO Î²²¿¶ÁÈ¡Ö¸¶¨³¤¶È buffer
  434          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  435          // ²ÎÊýËµÃ÷     *dat                Ä¿±ê»º³åÇøÖ¸Õë
  436          // ²ÎÊýËµÃ÷     *length             ¶ÁÈ¡µÄÊý¾Ý³¤¶È Èç¹ûÃ»ÓÐÕâÃ´¶àÊý¾ÝÕâÀï»á±»ÐÞ¸Ä
  437          // ²ÎÊýËµÃ÷     flag                ÊÇ·ñ±ä¸ü FIFO ×´Ì¬ ¿ÉÑ¡ÔñÊÇ·ñÇå¿Õ¶ÁÈ¡µÄÊý¾Ý
  438          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  439          // Ê¹ÓÃÊ¾Àý     zf_log(fifo_read_tail_buffer(&fifo, data, &length, FIFO_READ_ONLY) == FIFO_SUCCESS, "fifo
             -_read_buffer error");
  440          // ±¸×¢ÐÅÏ¢     Èç¹ûÊ¹ÓÃ FIFO_READ_AND_CLEAN ²Ù×÷ ½«»á¶ªÆúËùÓÐÊý¾Ý²¢Çå¿ÕÕû¸ö FIFO
  441          //              Èç¹ûÊ¹ÓÃ FIFO_READ_AND_CLEAN ²Ù×÷ ½«»á¶ªÆúËùÓÐÊý¾Ý²¢Çå¿ÕÕû¸ö FIFO
  442          //              Èç¹ûÊ¹ÓÃ FIFO_READ_AND_CLEAN ²Ù×÷ ½«»á¶ªÆúËùÓÐÊý¾Ý²¢Çå¿ÕÕû¸ö FIFO
  443          //-------------------------------------------------------------------------------------------------------
             -------------
  444          fifo_state_enum fifo_read_tail_buffer (fifo_struct *fifo, void *dat, uint32 *length, fifo_operation_enum 
             -flag)
  445          {
  446   1          //zf_assert(NULL != fifo);
  447   1          //zf_assert(NULL != length);
  448   1          fifo_state_enum return_state = FIFO_SUCCESS;                                // ²Ù×÷½á¹û³õÖµ
  449   1          uint32 temp_length = 0;
  450   1          uint32 fifo_data_length = 0;
  451   1      
  452   1          do
  453   1          {
  454   2              if(NULL == dat)
  455   2              {
  456   3                  return_state = FIFO_BUFFER_NULL;
  457   3              }
  458   2              else
  459   2              {
  460   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_WRITE) & fifo->execution)        // ÅÐ¶ÏÊÇ·ñµ±Ç° FIFO ÊÇ·ñ
             -ÔÚÖ´ÐÐÇå¿Õ»òÖØÖÃ²Ù×÷
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 9   

  461   3                  {
  462   4                      *length = fifo_data_length;                                     // ¾ÀÕý¶ÁÈ¡µÄ³¤¶È
  463   4                      return_state = FIFO_READ_UNDO;                                  // ¶ÁÈ¡²Ù×÷Î´Íê³É
  464   4                      break;
  465   4                  }
  466   3      
  467   3                  fifo_data_length = fifo_used(fifo);                                 // »ñÈ¡µ±Ç°Êý¾ÝÓÐ¶àÉÙ
  468   3                  if(*length > fifo_data_length)                                      // ÅÐ¶Ï³¤¶ÈÊÇ·ñ×ã¹»
  469   3                  {
  470   4                      *length = fifo_data_length;                                     // ¾ÀÕý¶ÁÈ¡µÄ³¤¶È
  471   4                      return_state = FIFO_DATA_NO_ENOUGH;                             // ±êÖ¾Êý¾Ý²»¹»
  472   4                      if(0 == fifo_data_length)                                       // Èç¹ûÃ»ÓÐÊý¾Ý ¾ÍÖ±½ÓÍË³
             -ö
  473   4                      {
  474   5                          fifo->execution &= ~FIFO_READ;                              // ¶Á²Ù×÷¸´Î»
  475   5                          break;
  476   5                      }
  477   4                  }
  478   3      
  479   3                  fifo->execution |= FIFO_READ;                                       // ¶Á²Ù×÷ÖÃÎ»
  480   3                  if((fifo->head > fifo->end) || (fifo->head >= *length))
  481   3                  {
  482   4                      switch(fifo->type)
  483   4                      {
  484   5                          case FIFO_DATA_8BIT:    memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->head - *length]),
             -  (uint16)*length);     break;
  485   5                          case FIFO_DATA_16BIT:   memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->head - *length])
             -, (uint16)(*length * 2));break;
  486   5                          case FIFO_DATA_32BIT:   memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->head - *length])
             -, (uint16)(*length * 4));break;
  487   5                      }
  488   4                  }
  489   3                  else
  490   3                  {
  491   4                      temp_length = *length - fifo->head;                             // ¼ÆËãÎ²Ö¸Õë¾àÀë»º³åÇøÎ²
             -»¹ÓÐ¶àÉÙ¿Õ¼ä
  492   4                      switch(fifo->type)
  493   4                      {
  494   5                          case FIFO_DATA_8BIT:
  495   5                          {
  496   6                              memcpy(dat, &(((uint8 *)fifo->buffer)[fifo->max - temp_length]), (uint16)temp_len
             -gth);
  497   6                              memcpy(&(((uint8 *)dat)[temp_length]), &(((uint8 *)fifo->buffer)[fifo->head - *le
             -ngth]), (uint16)(*length - temp_length));
  498   6                          }break;
  499   5                          case FIFO_DATA_16BIT:
  500   5                          {
  501   6                              memcpy(dat, &(((uint16 *)fifo->buffer)[fifo->max - temp_length]), temp_length * 2
             -);
  502   6                              memcpy(&(((uint16 *)dat)[temp_length]), &(((uint16 *)fifo->buffer)[fifo->head - *
             -length]), (uint16)((*length - temp_length) * 2));
  503   6                          }break;
  504   5                          case FIFO_DATA_32BIT:
  505   5                          {
  506   6                              memcpy(dat, &(((uint32 *)fifo->buffer)[fifo->max - temp_length]), temp_length * 4
             -);
  507   6                              memcpy(&(((uint32 *)dat)[temp_length]), &(((uint32 *)fifo->buffer)[fifo->head - *
             -length]), (uint16)((*length - temp_length) * 4));
  508   6                          }break;
  509   5                      }
  510   4                  }
  511   3                  fifo->execution &= ~FIFO_READ;                                      // ¶Á²Ù×÷¸´Î»
  512   3              }
  513   2      
  514   2              if(FIFO_READ_AND_CLEAN == flag)                                         // Èç¹ûÑ¡Ôñ¶ÁÈ¡²¢¸ü¸Ä FIF
             -O ×´Ì¬
C251 COMPILER V5.60.0,  zf_fifo                                                            08/04/24  13:47:30  PAGE 10  

  515   2              {
  516   3                  if((FIFO_RESET | FIFO_CLEAR | FIFO_READ) == fifo->execution)        // ²»ÔÚ ÖØÖÃ Çå¿Õ ¶ÁÈ¡ ×´
             -Ì¬ ±ÜÃâÒì³£
  517   3                  {
  518   4                      return_state = FIFO_CLEAR_UNDO;                                 // Çå¿Õ²Ù×÷Î´Íê³É
  519   4                      break;
  520   4                  }
  521   3                  fifo_clear(fifo);
  522   3              }
  523   2          }while(0);
  524   1      
  525   1          return return_state;
  526   1      }
  527          
  528          //-------------------------------------------------------------------------------------------------------
             -------------
  529          // º¯Êý¼ò½é     FIFO ³õÊ¼»¯ ¹ÒÔØ¶ÔÓ¦»º³åÇø
  530          // ²ÎÊýËµÃ÷     *fifo               FIFO ¶ÔÏóÖ¸Õë
  531          // ²ÎÊýËµÃ÷     type                FIFO Êý¾ÝÎ»Êý
  532          // ²ÎÊýËµÃ÷     *buffer_addr        Òª¹ÒÔØµÄ»º³åÇø
  533          // ²ÎÊýËµÃ÷     size                »º³åÇø´óÐ¡
  534          // ·µ»Ø²ÎÊý     fifo_state_enum     ²Ù×÷×´Ì¬
  535          // Ê¹ÓÃÊ¾Àý     fifo_init(&user_fifo, user_buffer, 64);
  536          // ±¸×¢ÐÅÏ¢
  537          //-------------------------------------------------------------------------------------------------------
             -------------
  538          fifo_state_enum fifo_init (fifo_struct *fifo, fifo_data_type_enum type, void *buffer_addr, uint32 len)
  539          {
  540   1          //zf_assert(NULL != fifo);
  541   1          fifo_state_enum return_state = FIFO_SUCCESS;
  542   1          do
  543   1          {
  544   2              fifo->buffer      = buffer_addr;
  545   2              fifo->execution   = FIFO_IDLE;
  546   2              fifo->type        = type;
  547   2              fifo->head        = 0;
  548   2              fifo->end         = 0;
  549   2              fifo->reamin_size   = len;
  550   2              fifo->max         = len;
  551   2          }while(0);
  552   1          return return_state;
  553   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      4266     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------     ------
  xdata-const size     =    ------     ------
  edata size           =       130     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =    ------     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
